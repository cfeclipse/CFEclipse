{
    "fileTypes": [
        "cfm", 
        "cfml", 
        "cfc"
    ], 
    "patterns": [
        {
            "contentName": "source.cfml.script", 
            "patterns": [
                {
                    "include": "#source-cfml-script"
                }
            ], 
            "end": "(?=not)possible", 
            "begin": "(?i)(?=^\\s*(/\\*|//|import\\b|(component|abstract\\s*component|final\\s*component|interface)(\\s+|{)))"
        }, 
        {
            "include": "#comments"
        }, 
        {
            "contentName": "source.cfml", 
            "patterns": [
                {
                    "include": "#cfcomponent"
                }, 
                {
                    "include": "#cfinterface"
                }
            ], 
            "end": "(?=not)possible", 
            "begin": "(?i)(?=<cf(component|interface)\\b)"
        }, 
        {
            "contentName": "text.html.cf", 
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "include": "#text-html-cfml"
                }
            ], 
            "end": "(?=not)possible", 
            "begin": "(?=\\S)"
        }
    ], 
    "repository": {
        "text-html-cfml-tag-stuff": {
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "include": "#text-html-cfml-tag-id-attribute"
                }, 
                {
                    "include": "#text-html-cfml-tag-generic-attribute"
                }, 
                {
                    "include": "#text-html-cfml-string-double-quoted"
                }, 
                {
                    "include": "#text-html-cfml-string-single-quoted"
                }
            ]
        }, 
        "source-cfml-script-cfml-scopes": {
            "patterns": [
                {
                    "name": "variable.language.super.cfml", 
                    "match": "\\b(?i:super)\\b"
                }, 
                {
                    "name": "variable.language.this.cfml", 
                    "match": "\\b(?i:this)\\b"
                }, 
                {
                    "name": "variable.language.scope.cfml", 
                    "match": "\\b(?i:thread)\\b(?=[\\[.])"
                }, 
                {
                    "name": "variable.language.scope.cfml", 
                    "match": "(?x)\n  \\b(?i:(\n  application|arguments|attributes|caller|cgi|client|cookie|flash|form|\n  local|request|server|session|thistag|url|variables|self|static|argumentcollection\n))\\b"
                }
            ]
        }, 
        "source-css": {
            "patterns": [
                {
                    "include": "#source-css-comment-block"
                }, 
                {
                    "include": "#source-css-selector"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.control.at-rule.charset.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.keyword.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#source-css-string-double"
                        }, 
                        {
                            "include": "#source-css-string-single"
                        }
                    ], 
                    "end": "\\s*((?=;|$))", 
                    "name": "meta.at-rule.charset.css", 
                    "begin": "\\s*((@)charset\\b)\\s*"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.control.at-rule.import.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.keyword.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#source-css-string-double"
                        }, 
                        {
                            "include": "#source-css-string-single"
                        }, 
                        {
                            "endCaptures": {
                                "1": {
                                    "name": "punctuation.section.function.css"
                                }
                            }, 
                            "beginCaptures": {
                                "1": {
                                    "name": "support.function.url.css"
                                }, 
                                "2": {
                                    "name": "punctuation.section.function.css"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfml-tags"
                                }, 
                                {
                                    "name": "variable.parameter.url.css", 
                                    "match": "[^'\") \\t]+"
                                }, 
                                {
                                    "include": "#source-css-string-single"
                                }, 
                                {
                                    "include": "#source-css-string-double"
                                }
                            ], 
                            "end": "\\s*(\\))\\s*", 
                            "begin": "\\s*(url)\\s*(\\()\\s*"
                        }, 
                        {
                            "include": "#source-css-media-query-list"
                        }
                    ], 
                    "end": "\\s*((?=;|\\}))", 
                    "name": "meta.at-rule.import.css", 
                    "begin": "\\s*((@)import\\b)\\s*"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.property-list.css"
                        }
                    }, 
                    "name": "meta.at-rule.font-face.css", 
                    "begin": "^\\s*((@)font-face)\\s*(?=\\{)", 
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.at-rule.font-face.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.keyword.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#source-css-rule-list"
                        }
                    ], 
                    "end": "\\s*(\\})"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.property-list.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.control.at-rule.media.css"
                                }, 
                                "2": {
                                    "name": "punctuation.definition.keyword.css"
                                }, 
                                "3": {
                                    "name": "support.constant.media.css"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfml-tags"
                                }, 
                                {
                                    "include": "#source-css-media-query-list"
                                }
                            ], 
                            "end": "\\s*(?=\\{)", 
                            "name": "meta.at-rule.media.css", 
                            "begin": "^\\s*((@)media)(?=.*?\\{)"
                        }, 
                        {
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.section.property-list.css"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfml-tags"
                                }, 
                                {
                                    "include": "#source-css"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "begin": "\\s*(\\{)"
                        }
                    ], 
                    "end": "\\s*(\\})", 
                    "begin": "(?=^\\s*@media\\s*.*?\\{)"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.property-list.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#source-css-rule-list"
                        }
                    ], 
                    "end": "\\}", 
                    "begin": "(?=\\{)"
                }
            ]
        }, 
        "source-cfml-script-arrow-function-declaration": {
            "patterns": [
                {
                    "endCaptures": {
                        "1": {
                            "name": "storage.type.function.arrow.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-arrow-function-declaration-parameters"
                        }
                    ], 
                    "end": "(=>)\\s*", 
                    "name": "meta.function.declaration.cfml", 
                    "begin": "(?=\\([^\\(]*?\\)\\s*=>\\s*\\{)"
                }, 
                {
                    "patterns": [
                        {
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration-parameters"
                                }
                            ], 
                            "end": "(?=(=>))", 
                            "name": "meta.function.declaration.cfml", 
                            "begin": "(?=\\()"
                        }, 
                        {
                            "contentName": "meta.function.body.cfml", 
                            "beginCaptures": {
                                "0": {
                                    "name": "meta.function.declaration.cfml"
                                }, 
                                "1": {
                                    "name": "storage.type.function.arrow.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ], 
                            "end": "(?=[);}\\],\\n])", 
                            "begin": "(=>)\\s*"
                        }
                    ], 
                    "end": "(?=[);}\\],\\n])", 
                    "begin": "(?=\\([^\\(]*?\\)\\s*=>)"
                }
            ]
        }, 
        "source-cfml-script-call": {
            "patterns": [
                {
                    "patterns": [
                        {
                            "include": "#source-cfml-script-support-call"
                        }, 
                        {
                            "captures": {
                                "1": {
                                    "name": "meta.function-call.cfml variable.function.cfml"
                                }
                            }, 
                            "match": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()"
                        }, 
                        {
                            "include": "#source-cfml-script-function-call-params"
                        }
                    ], 
                    "end": "(?<=\\))", 
                    "begin": "(?=\\b[_$a-zA-Z][$\\w]*\\s*\\()"
                }, 
                {
                    "patterns": [
                        {
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.accessor.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-cfml-scopes"
                                }, 
                                {
                                    "name": "variable.other.object.cfml", 
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ], 
                            "end": "\\.", 
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)"
                        }, 
                        {
                            "name": "keyword.other.accessor.cfml", 
                            "match": "\\."
                        }, 
                        {
                            "include": "#source-cfml-script-method-call"
                        }
                    ], 
                    "end": "(?<=\\))", 
                    "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.\\s*[_$a-zA-Z][$\\w]*\\s*\\()"
                }, 
                {
                    "patterns": [
                        {
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.accessor.static.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "name": "entity.name.class.cfml", 
                                    "match": "[_$a-zA-Z][$\\w.]*"
                                }
                            ], 
                            "end": "::", 
                            "begin": "(?=[_$a-zA-Z][$\\w.]*\\s*::)"
                        }, 
                        {
                            "include": "#source-cfml-script-static-method-call"
                        }
                    ], 
                    "end": "(?<=\\))", 
                    "begin": "(?=[_$a-zA-Z][$\\w.]*\\s*::\\s*[_$a-zA-Z][$\\w]*\\s*\\()"
                }
            ]
        }, 
        "text-html-cfml-cfoutput-string-single-quoted": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.html"
                }
            }, 
            "name": "string.quoted.single.html", 
            "begin": "'", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.html"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "include": "#text-html-cfml-cfoutput-entities"
                }
            ], 
            "end": "'"
        }, 
        "source-cfml-script-method-call-params": {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.group.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "name": "punctuation.separator.function-call.method.cfml", 
                    "match": ","
                }, 
                {
                    "beginCaptures": {
                        "1": {
                            "name": "entity.other.method-parameter.cfml"
                        }, 
                        "2": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "(?=[,\\)])", 
                    "begin": "\\b([_$a-zA-Z][$\\w]*)\\s*(=)(?!=)"
                }, 
                {
                    "include": "#source-cfml-script-expressions"
                }
            ], 
            "end": "(?=\\))", 
            "name": "meta.function-call.parameters.method.cfml", 
            "begin": "\\("
        }, 
        "source-css-string-single": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.css"
                }
            }, 
            "name": "string.quoted.single.css", 
            "begin": "'", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.css"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "name": "constant.character.escape.css", 
                    "match": "\\\\."
                }
            ], 
            "end": "'"
        }, 
        "text-html-cfml-string-double-quoted": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.html"
                }
            }, 
            "name": "string.quoted.double.html", 
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.html"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "include": "#text-html-cfml-entities"
                }
            ], 
            "end": "\""
        }, 
        "source-sql": {
            "patterns": [
                {
                    "include": "#source-sql-comments"
                }, 
                {
                    "captures": {
                        "5": {
                            "name": "entity.name.function.sql"
                        }, 
                        "1": {
                            "name": "keyword.other.create.sql"
                        }, 
                        "2": {
                            "name": "keyword.other.sql"
                        }
                    }, 
                    "name": "meta.create.sql", 
                    "match": "(?i:^\\s*(create)\\s+(aggregate|conversion|database|domain|function|group|(unique\\s+)?index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)(['\"`]?)(\\w+)\\4"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.other.create.sql"
                        }, 
                        "2": {
                            "name": "keyword.other.sql"
                        }
                    }, 
                    "name": "meta.drop.sql", 
                    "match": "(?i:^\\s*(drop)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view))"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "keyword.other.cascade.sql"
                        }, 
                        "1": {
                            "name": "keyword.other.create.sql"
                        }, 
                        "2": {
                            "name": "keyword.other.table.sql"
                        }, 
                        "3": {
                            "name": "entity.name.function.sql"
                        }
                    }, 
                    "name": "meta.drop.sql", 
                    "match": "(?i:\\s*(drop)\\s+(table)\\s+(\\w+)(\\s+cascade)?\\b)"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.other.create.sql"
                        }, 
                        "2": {
                            "name": "keyword.other.table.sql"
                        }
                    }, 
                    "name": "meta.alter.sql", 
                    "match": "(?i:^\\s*(alter)\\s+(aggregate|conversion|database|domain|function|group|index|language|operator class|operator|rule|schema|sequence|table|tablespace|trigger|type|user|view)\\s+)"
                }, 
                {
                    "captures": {
                        "7": {
                            "name": "constant.numeric.sql"
                        }, 
                        "8": {
                            "name": "constant.numeric.sql"
                        }, 
                        "9": {
                            "name": "storage.type.sql"
                        }, 
                        "4": {
                            "name": "storage.type.sql"
                        }, 
                        "5": {
                            "name": "constant.numeric.sql"
                        }, 
                        "14": {
                            "name": "constant.numeric.sql"
                        }, 
                        "15": {
                            "name": "storage.type.sql"
                        }, 
                        "12": {
                            "name": "storage.type.sql"
                        }, 
                        "13": {
                            "name": "storage.type.sql"
                        }, 
                        "2": {
                            "name": "storage.type.sql"
                        }, 
                        "3": {
                            "name": "constant.numeric.sql"
                        }, 
                        "10": {
                            "name": "constant.numeric.sql"
                        }, 
                        "11": {
                            "name": "storage.type.sql"
                        }, 
                        "6": {
                            "name": "storage.type.sql"
                        }, 
                        "1": {
                            "name": "storage.type.sql"
                        }
                    }, 
                    "match": "(?xi)\n\n                # normal stuff, capture 1\n                 \\b(bigint|bigserial|bit|boolean|box|bytea|cidr|circle|date|double\\sprecision|inet|int|integer|line|lseg|macaddr|money|oid|path|point|polygon|real|serial|smallint|sysdate|text)\\b\n\n                # numeric suffix, capture 2 + 3i\n                |\\b(bit\\svarying|character\\s(?:varying)?|tinyint|var\\schar|float|interval)\\((\\d+)\\)\n\n                # optional numeric suffix, capture 4 + 5i\n                |\\b(char|number|varchar\\d?)\\b(?:\\((\\d+)\\))?\n\n                # special case, capture 6 + 7i + 8i\n                |\\b(numeric)\\b(?:\\((\\d+),(\\d+)\\))?\n\n                # special case, captures 9, 10i, 11\n                |\\b(times)(?:\\((\\d+)\\))(\\swithoutstimeszone\\b)?\n\n                # special case, captures 12, 13, 14i, 15\n                |\\b(timestamp)(?:(s)\\((\\d+)\\)(\\swithoutstimeszone\\b)?)?\n\n            "
                }, 
                {
                    "name": "storage.modifier.sql", 
                    "match": "(?i:\\b((?:primary|foreign)\\s+key|references|on\\sdelete(\\s+cascade)?|check|constraint)\\b)"
                }, 
                {
                    "name": "constant.numeric.sql", 
                    "match": "\\b\\d+\\b"
                }, 
                {
                    "name": "keyword.other.DML.sql", 
                    "match": "(?i:\\b(select(\\s+distinct)?|insert\\s+(ignore\\s+)?into|update|delete|from|set|where|group\\sby|or|like|and|union(\\s+all)?|having|order\\sby|limit|(inner|cross)\\s+join|straight_join|(left|right)(\\s+outer)?\\s+join|natural(\\s+(left|right)(\\s+outer)?)?\\s+join)\\b)"
                }, 
                {
                    "name": "keyword.other.DDL.create.II.sql", 
                    "match": "(?i:\\b(on|((is\\s+)?not\\s+)?null)\\b)"
                }, 
                {
                    "name": "keyword.other.DML.II.sql", 
                    "match": "(?i:\\bvalues\\b)"
                }, 
                {
                    "name": "keyword.other.LUW.sql", 
                    "match": "(?i:\\b(begin(\\s+work)?|start\\s+transaction|commit(\\s+work)?|rollback(\\s+work)?)\\b)"
                }, 
                {
                    "name": "keyword.other.authorization.sql", 
                    "match": "(?i:\\b(grant(\\swith\\sgrant\\soption)?|revoke)\\b)"
                }, 
                {
                    "name": "keyword.other.data-integrity.sql", 
                    "match": "(?i:\\bin\\b)"
                }, 
                {
                    "name": "keyword.other.object-comments.sql", 
                    "match": "(?i:^\\s*(comment\\s+on\\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\\s+.*?\\s+(is)\\s+)"
                }, 
                {
                    "name": "keyword.other.alias.sql", 
                    "match": "(?i)\\bAS\\b"
                }, 
                {
                    "name": "keyword.other.order.sql", 
                    "match": "(?i)\\b(DESC|ASC)\\b"
                }, 
                {
                    "name": "keyword.operator.star.sql", 
                    "match": "\\*"
                }, 
                {
                    "name": "keyword.operator.comparison.sql", 
                    "match": "[!<>]?=|<>|<|>"
                }, 
                {
                    "name": "keyword.operator.math.sql", 
                    "match": "-|\\+|/"
                }, 
                {
                    "name": "keyword.operator.concatenator.sql", 
                    "match": "\\|\\|"
                }, 
                {
                    "comment": "List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html", 
                    "name": "support.function.scalar.sql", 
                    "match": "(?i)\\b(CURRENT_(DATE|TIME(STAMP)?|USER)|(SESSION|SYSTEM)_USER)\\b"
                }, 
                {
                    "comment": "List of SQL99 built-in functions from http://www.oreilly.com/catalog/sqlnut/chapter/ch04.html", 
                    "name": "support.function.aggregate.sql", 
                    "match": "(?i)\\b(AVG|COUNT|MIN|MAX|SUM)(?=\\s*\\()"
                }, 
                {
                    "name": "support.function.string.sql", 
                    "match": "(?i)\\b(CONCATENATE|CONVERT|LOWER|SUBSTRING|TRANSLATE|TRIM|UPPER)\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "constant.other.database-name.sql"
                        }, 
                        "2": {
                            "name": "constant.other.table-name.sql"
                        }
                    }, 
                    "match": "\\b(\\w+?)\\.(\\w+)\\b"
                }, 
                {
                    "include": "#source-sql-strings"
                }, 
                {
                    "include": "#source-sql-regexps"
                }
            ]
        }, 
        "source-cfml-script-static": {
            "endCaptures": {
                "1": {
                    "name": "meta.block.static.cfml punctuation.definition.block.end.cfml"
                }
            }, 
            "name": "meta.block.static.cfml", 
            "begin": "\\bstatic\\b(?=\\s*[\\n\\{])", 
            "beginCaptures": {
                "0": {
                    "name": "keyword.control.static.cfml"
                }
            }, 
            "patterns": [
                {
                    "include": "#source-cfml-script-block-scope"
                }
            ], 
            "end": "(?:(\\})|(?=[^\\{\\}\\s]))"
        }, 
        "source-css-cfoutput-numeric-values": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.constant.css"
                        }
                    }, 
                    "name": "constant.other.color.rgb-value.css", 
                    "match": "(#)([0-9a-fA-F]{3}|[0-9a-fA-F]{6})\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.other.unit.css"
                        }
                    }, 
                    "name": "constant.numeric.css", 
                    "match": "(?x)\n                        (?:-|\\+)?(?:(?:[0-9]+(?:\\.[0-9]+)?)|(?:\\.[0-9]+))\n                        ((?:px|pt|ch|cm|mm|in|r?em|ex|pc|deg|g?rad|dpi|dpcm|s)\\b|%)?\n                    "
                }
            ]
        }, 
        "source-sql-regexps": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.sql"
                        }
                    }, 
                    "name": "string.regexp.sql", 
                    "begin": "/(?=\\S.*/)", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.sql"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-sql-string_interpolation"
                        }, 
                        {
                            "name": "constant.character.escape.slash.sql", 
                            "match": "\\\\/"
                        }
                    ], 
                    "end": "/"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.sql"
                        }
                    }, 
                    "name": "string.regexp.modr.sql", 
                    "begin": "%r\\{", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.sql"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-sql-string_interpolation"
                        }
                    ], 
                    "comment": "We should probably handle nested bracket pairs!?! -- Allan", 
                    "end": "\\}"
                }
            ]
        }, 
        "tag-generic-attribute": {
            "patterns": [
                {
                    "include": "#comments"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "entity.other.attribute-name.cfml"
                        }
                    }, 
                    "match": "\\b([a-zA-Z0-9:-]+)\\b"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.key-value.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#comments"
                        }, 
                        {
                            "include": "#string"
                        }, 
                        {
                            "patterns": [
                                {
                                    "include": "#hash-delimiters"
                                }
                            ], 
                            "end": "(?=[\\s</>{;])", 
                            "name": "string.unquoted.cfml", 
                            "begin": "(?=[^\\s</>{;\\'\"])"
                        }
                    ], 
                    "end": "(?<=[^\\s=])|(?=[</>{;])", 
                    "begin": "="
                }
            ]
        }, 
        "source-cfml-script-comments": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    }, 
                    "name": "comment.block.documentation.cfml", 
                    "begin": "(/\\*\\*)\\s*$", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "contentName": "text.html", 
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.other.documentation.cfml"
                                }, 
                                "2": {
                                    "name": "punctuation.definition.keyword.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "text.html.basic"
                                }
                            ], 
                            "end": "(\\n|(?=\\*/))", 
                            "begin": "^\\s*\\*?\\s*((\\@)\\S*)\\s"
                        }, 
                        {
                            "contentName": "text.html", 
                            "patterns": [
                                {
                                    "include": "text.html.basic"
                                }
                            ], 
                            "end": "(\\n|(?=\\*/))", 
                            "begin": "^\\s*(\\*(?!/))?\\s*(?=\\w)"
                        }
                    ], 
                    "end": "\\*/"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    }, 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.cfml", 
                    "begin": "/\\*"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    }, 
                    "end": "\\n", 
                    "name": "comment.line.double-slash.cfml", 
                    "begin": "//"
                }, 
                {
                    "include": "#comments"
                }
            ]
        }, 
        "source-cfml-script-brackets": {
            "patterns": [
                {
                    "include": "#source-cfml-script-round-brackets"
                }, 
                {
                    "include": "#source-cfml-script-square-brackets"
                }
            ]
        }, 
        "source-cfml-script-block-scope": {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "include": "#source-cfml-script-statements"
                }
            ], 
            "end": "(?=\\})", 
            "name": "meta.block.cfml", 
            "begin": "\\{"
        }, 
        "source-css-cfoutput-media-query": {
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.arbitrary-repitition.css"
                }
            }, 
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.logic.media.css"
                }, 
                "2": {
                    "name": "support.constant.media.css"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.logic.media.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "endCaptures": {
                                "1": {
                                    "name": "punctuation.separator.key-value.css"
                                }
                            }, 
                            "beginCaptures": {
                                "0": {
                                    "name": "support.type.property-name.media.css"
                                }
                            }, 
                            "end": "(:)|(?=\\))", 
                            "begin": "(?x)\n                                (\n                                    ((min|max)-)?\n                                    (\n                                        ((device-)?(height|width|aspect-ratio))|\n                                        (color(-index)?)|monochrome|resolution\n                                    )\n                                )|grid|scan|orientation\n                                \\s*(?=[:)])"
                        }, 
                        {
                            "name": "support.constant.property-value.css", 
                            "match": "\\b(portrait|landscape|progressive|interlace)"
                        }, 
                        {
                            "captures": {
                                "1": {
                                    "name": "constant.numeric.css"
                                }, 
                                "2": {
                                    "name": "keyword.operator.arithmetic.css"
                                }, 
                                "3": {
                                    "name": "constant.numeric.css"
                                }
                            }, 
                            "match": "\\s*(\\d+)(/)(\\d+)"
                        }, 
                        {
                            "include": "#source-css-cfoutput-numeric-values"
                        }
                    ], 
                    "end": "\\)", 
                    "begin": "\\s*(and)?\\s*(\\()\\s*"
                }
            ], 
            "end": "\\s*(?:(,)|(?=[{;]))", 
            "begin": "(?i)\\s*(only|not)?\\s*(all|aural|braille|embossed|handheld|print|projection|screen|tty|tv)?"
        }, 
        "source-css-property-values": {
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "name": "support.constant.property-value.css", 
                    "match": "\\b(absolute|all(-scroll)?|always|armenian|auto|avoid|baseline|below|bidi-override|block|bold|bolder|both|bottom|break-all|break-word|capitalize|center|char|circle|cjk-ideographic|col-resize|collapse|crosshair|dashed|decimal-leading-zero|decimal|default|disabled|disc|distribute-all-lines|distribute-letter|distribute-space|distribute|dotted|double|e-resize|ellipsis|fixed|geometricPrecision|georgian|groove|hand|hebrew|help|hidden|hiragana-iroha|hiragana|horizontal|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space|inactive|inherit|inline-block|inline|inset|inside|inter-ideograph|inter-word|italic|justify|katakana-iroha|katakana|keep-all|left|lighter|line-edge|line-through|line|list-item|loose|lower-alpha|lower-greek|lower-latin|lower-roman|lowercase|lr-tb|ltr|medium|middle|move|n-resize|ne-resize|newspaper|no-drop|no-repeat|nw-resize|none|normal|not-allowed|nowrap|oblique|optimize(Legibility|Quality|Speed)|outset|outside|overline|pointer|pre(-(wrap|line))?|progress|relative|repeat-x|repeat-y|repeat|right|ridge|row-resize|rtl|s-resize|scroll|se-resize|separate|small-caps|solid|square|static|strict|sub|super|sw-resize|table-footer-group|table-header-group|tb-rl|text-bottom|text-top|text|thick|thin|top|transparent|underline|upper-alpha|upper-latin|upper-roman|uppercase|vertical(-(ideographic|text))?|visible(Painted|Fill|Stroke)?|w-resize|wait|whitespace|zero|smaller|larger|((xx?-)?(small|large))|painted|fill|stroke)\\b"
                }, 
                {
                    "name": "support.constant.font-name.css", 
                    "match": "(\\b(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif|monospace)\\b)"
                }, 
                {
                    "include": "#source-css-numeric-values"
                }, 
                {
                    "include": "#source-css-color-values"
                }, 
                {
                    "include": "#source-css-string-double"
                }, 
                {
                    "include": "#source-css-string-single"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.misc.css"
                        }, 
                        "2": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#source-css-numeric-values"
                        }
                    ], 
                    "end": "(\\))", 
                    "begin": "(rect)\\s*(\\()"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.misc.css"
                        }, 
                        "2": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#source-css-string-single"
                        }, 
                        {
                            "include": "#source-css-string-double"
                        }, 
                        {
                            "name": "variable.parameter.misc.css", 
                            "match": "[^'\") \\t]+"
                        }
                    ], 
                    "end": "(\\))", 
                    "begin": "(format|local|url|attr|counter|counters)\\s*(\\()"
                }, 
                {
                    "name": "keyword.other.important.css", 
                    "match": "\\!\\s*important"
                }
            ]
        }, 
        "source-cfml-script-queryexecute-parameter": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "entity.other.function-parameter.cfml"
                        }, 
                        "2": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-sql-string"
                        }, 
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "(?=[,\\)])", 
                    "begin": "\\b(sql)\\s*(=)(?!=)"
                }
            ]
        }, 
        "text-html-cfml-cfoutput-entities": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.html"
                        }, 
                        "3": {
                            "name": "punctuation.definition.entity.html"
                        }
                    }, 
                    "name": "constant.character.entity.html", 
                    "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
                }, 
                {
                    "name": "invalid.illegal.bad-ampersand.html", 
                    "match": "&"
                }
            ]
        }, 
        "cfml-tags": {
            "patterns": [
                {
                    "include": "#comments"
                }, 
                {
                    "include": "#cffunction"
                }, 
                {
                    "include": "#cfoutput"
                }, 
                {
                    "include": "#cfquery"
                }, 
                {
                    "include": "#cfif"
                }, 
                {
                    "include": "#tags-with-script"
                }, 
                {
                    "include": "#cfscript"
                }, 
                {
                    "include": "#cfproperty"
                }, 
                {
                    "include": "#cfargument"
                }, 
                {
                    "include": "#custom-tags"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "name": "meta.tag.cfml", 
                    "begin": "(?i)(<)(cf[a-z]+)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": "(/?>)"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.cfml"
                        }, 
                        "3": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "name": "meta.tag.cfml", 
                    "match": "(?i)(</)(cf[a-z]+)(>)"
                }
            ]
        }, 
        "source-css-media-query": {
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.arbitrary-repitition.css"
                }
            }, 
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.logic.media.css"
                }, 
                "2": {
                    "name": "support.constant.media.css"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.operator.logic.media.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "endCaptures": {
                                "1": {
                                    "name": "punctuation.separator.key-value.css"
                                }
                            }, 
                            "beginCaptures": {
                                "0": {
                                    "name": "support.type.property-name.media.css"
                                }
                            }, 
                            "end": "(:)|(?=\\))", 
                            "begin": "(?x)\n                                (\n                                    ((min|max)-)?\n                                    (\n                                        ((device-)?(height|width|aspect-ratio))|\n                                        (color(-index)?)|monochrome|resolution\n                                    )\n                                )|grid|scan|orientation\n                                \\s*(?=[:)])"
                        }, 
                        {
                            "name": "support.constant.property-value.css", 
                            "match": "\\b(portrait|landscape|progressive|interlace)"
                        }, 
                        {
                            "captures": {
                                "1": {
                                    "name": "constant.numeric.css"
                                }, 
                                "2": {
                                    "name": "keyword.operator.arithmetic.css"
                                }, 
                                "3": {
                                    "name": "constant.numeric.css"
                                }
                            }, 
                            "match": "\\s*(\\d+)(/)(\\d+)"
                        }, 
                        {
                            "include": "#source-css-numeric-values"
                        }
                    ], 
                    "end": "\\)", 
                    "begin": "\\s*(and)?\\s*(\\()\\s*"
                }
            ], 
            "end": "\\s*(?:(,)|(?=[{;]))", 
            "begin": "(?i)\\s*(only|not)?\\s*(all|aural|braille|embossed|handheld|print|projection|screen|tty|tv)?"
        }, 
        "source-cfml-script-conditional": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "name": "meta.switch.cfml", 
                    "begin": "\\bswitch\\b", 
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.switch.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-round-brackets"
                        }, 
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ], 
                                    "end": "(?=(\\bcase\\b|\\bdefault\\b|\\}))", 
                                    "begin": ":"
                                }, 
                                {
                                    "name": "keyword.control.switch.cfml", 
                                    "match": "\\b(case|default)\\b"
                                }, 
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "name": "meta.block.cfml", 
                            "begin": "\\{"
                        }
                    ], 
                    "end": "\\}"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.group.cfml punctuation.definition.group.end.cfml"
                        }
                    }, 
                    "name": "meta.do-while.cfml", 
                    "begin": "\\bdo\\b", 
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.loop.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.end.cfml"
                                }
                            }, 
                            "name": "meta.block.cfml", 
                            "begin": "\\{", 
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ], 
                            "end": "\\}"
                        }, 
                        {
                            "name": "keyword.control.loop.cfml", 
                            "match": "\\bwhile\\b"
                        }, 
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.group.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ], 
                            "end": "(?=\\))", 
                            "name": "meta.group.cfml", 
                            "begin": "\\("
                        }
                    ], 
                    "end": "\\)"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "name": "meta.for.cfml", 
                    "begin": "\\bfor\\b", 
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.loop.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-parens-block-scope"
                        }
                    ], 
                    "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "name": "meta.while.cfml", 
                    "begin": "\\bwhile\\b", 
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.loop.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-parens-block-scope"
                        }
                    ], 
                    "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "name": "meta.conditional.cfml", 
                    "begin": "\\b(else\\s+if|if)\\b", 
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.conditional.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-parens-block-scope"
                        }
                    ], 
                    "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "name": "meta.conditional.cfml", 
                    "begin": "\\belse\\b", 
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.conditional.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-block-scope"
                        }
                    ], 
                    "end": "(?:(\\})|(?=[^\\{\\}\\s]))"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "name": "meta.try.cfml", 
                    "begin": "\\btry\\b", 
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.trycatch.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-block-scope"
                        }
                    ], 
                    "end": "(?:(\\})|(?=[^\\{\\}\\s]))"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "name": "meta.finally.cfml", 
                    "begin": "\\bfinally\\b", 
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.trycatch.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-block-scope"
                        }
                    ], 
                    "end": "(?:(\\})|(?=[^\\{\\}\\s]))"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "name": "meta.catch.cfml", 
                    "begin": "\\bcatch\\b", 
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.trycatch.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-parens-block-scope"
                        }
                    ], 
                    "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))"
                }
            ]
        }, 
        "cfproperty": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "name": "meta.tag.cfml meta.tag.property.cfml", 
                    "begin": "(?i)(<)(cfproperty)\\b", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "captures": {
                                "9": {
                                    "name": "meta.tag.property.name.cfml"
                                }, 
                                "7": {
                                    "name": "string.quoted.single.cfml"
                                }, 
                                "8": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                }, 
                                "10": {
                                    "name": "punctuation.definition.string.end.cfml"
                                }, 
                                "4": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                }, 
                                "5": {
                                    "name": "meta.tag.property.name.cfml"
                                }, 
                                "6": {
                                    "name": "punctuation.definition.string.end.cfml"
                                }, 
                                "11": {
                                    "name": "string.unquoted.cfml meta.tag.property.name.cfml"
                                }, 
                                "1": {
                                    "name": "entity.other.attribute-name.cfml"
                                }, 
                                "2": {
                                    "name": "punctuation.separator.key-value.cfml"
                                }, 
                                "3": {
                                    "name": "string.quoted.double.cfml"
                                }
                            }, 
                            "match": "(?i)\\b(name)\\s*(=)\\s*(?:((\")([^<>\"']*)(\"))|((')([^<>\"']*)('))|([^<>\"'\\s]*))"
                        }, 
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": "(/?>)"
                }
            ]
        }, 
        "text-html-cfml-tag-id-attribute": {
            "captures": {
                "1": {
                    "name": "entity.other.attribute-name.id.html"
                }, 
                "2": {
                    "name": "punctuation.separator.key-value.html"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "contentName": "meta.toc-list.id.html", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.html"
                        }
                    }, 
                    "name": "string.quoted.double.html", 
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-entities"
                        }
                    ], 
                    "end": "\""
                }, 
                {
                    "contentName": "meta.toc-list.id.html", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.html"
                        }
                    }, 
                    "name": "string.quoted.single.html", 
                    "begin": "'", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-entities"
                        }
                    ], 
                    "end": "'"
                }
            ], 
            "end": "(?<='|\")", 
            "name": "meta.attribute-with-value.id.html", 
            "begin": "\\b(id)\\b\\s*(=)"
        }, 
        "text-html-cfml-tag-generic-attribute": {
            "name": "entity.other.attribute-name.html", 
            "match": "\\b([a-zA-Z\\-:]+)"
        }, 
        "source-cfml-script-number": {
            "name": "constant.numeric.cfml", 
            "match": "(?xi)(?:\\B[-+])?(?:\\b0x[0-9a-f]*|(\\B\\.[0-9]+|\\b[0-9]+(\\.[0-9]*)?))"
        }, 
        "source-cfml-script-statements": {
            "patterns": [
                {
                    "include": "#source-cfml-script-conditional"
                }, 
                {
                    "include": "#source-cfml-script-static"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "name": "meta.block.cfml", 
                    "begin": "\\{", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-statements"
                        }
                    ], 
                    "end": "\\}"
                }, 
                {
                    "include": "#source-cfml-script-tag-in-script"
                }, 
                {
                    "include": "#source-cfml-script-tag-in-script-cf"
                }, 
                {
                    "include": "#source-cfml-script-expressions"
                }
            ]
        }, 
        "custom-tags": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "name": "meta.tag.custom.cfml", 
                    "begin": "(?i)(<)(cf_[a-z]*)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.custom.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": "(/?>)"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.custom.cfml"
                        }, 
                        "3": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "name": "meta.tag.custom.cfml", 
                    "match": "(?i)(</)(cf_[a-z]*)(>)"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "name": "meta.tag.custom.cfml", 
                    "begin": "(?i)(<)([a-z]+)(\\:)([a-z]*)", 
                    "beginCaptures": {
                        "4": {
                            "name": "entity.name.tag.custom.cfml"
                        }, 
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.custom.cfml"
                        }, 
                        "3": {
                            "name": "entity.name.tag.custom.cfml punctuation.separator.prefix.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": "(/?>)"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.custom.cfml"
                        }, 
                        "3": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "name": "meta.tag.custom.cfml", 
                    "match": "(?i)(</)([a-z]+\\:[a-z]*)(>)"
                }
            ]
        }, 
        "source-cfml-script-keywords": {
            "patterns": [
                {
                    "name": "keyword.control.trycatch.cfml", 
                    "match": "\\b(throw|rethrow)\\b(?!\\()"
                }, 
                {
                    "name": "keyword.control.loop.cfml", 
                    "match": "(?<!\\.)\\b(break|continue)\\b"
                }, 
                {
                    "name": "keyword.control.flow.cfml", 
                    "match": "(?<!\\.)\\b(abort)\\b"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.flow.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "(?<!\\.)\\b(return)\\b"
                }, 
                {
                    "name": "storage.type.cfml", 
                    "match": "\\bvar\\b"
                }
            ]
        }, 
        "string-quoted-single": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.cfml"
                }
            }, 
            "name": "string.quoted.single.cfml", 
            "begin": "'", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "include": "#hash-delimiters"
                }, 
                {
                    "name": "constant.character.escape.quote.cfml", 
                    "match": "''"
                }
            ], 
            "end": "'(?!')"
        }, 
        "source-css-cfoutput-string-single": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.css"
                }
            }, 
            "name": "string.quoted.single.css", 
            "begin": "'", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.css"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "name": "constant.character.escape.css", 
                    "match": "\\\\."
                }
            ], 
            "end": "'"
        }, 
        "source-css-numeric-values": {
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.constant.css"
                        }
                    }, 
                    "name": "constant.other.color.rgb-value.css", 
                    "match": "(#)([0-9a-fA-F]{3}|[0-9a-fA-F]{6})\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.other.unit.css"
                        }
                    }, 
                    "name": "constant.numeric.css", 
                    "match": "(?x)\n                        (?:-|\\+)?(?:(?:[0-9]+(?:\\.[0-9]+)?)|(?:\\.[0-9]+))\n                        ((?:px|pt|ch|cm|mm|in|r?em|ex|pc|deg|g?rad|dpi|dpcm|s)\\b|%)?\n                    "
                }
            ]
        }, 
        "tags-with-script": {
            "contentName": "source.cfml.script", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            }, 
            "name": "meta.tag.cfml", 
            "begin": "(?i)(<)(cfset|cfreturn)(?=\\s|/?>)", 
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                }, 
                "2": {
                    "name": "entity.name.tag.cfml"
                }
            }, 
            "patterns": [
                {
                    "include": "#source-cfml-script"
                }
            ], 
            "end": "(/?>)"
        }, 
        "source-cfml-script-component": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.class.body.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "beginCaptures": {
                                "1": {
                                    "name": "storage.modifier.cfml"
                                }, 
                                "2": {
                                    "name": "storage.type.class.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-comments"
                                }, 
                                {
                                    "include": "#source-cfml-script-component-attributes"
                                }
                            ], 
                            "end": "(?=\\{)", 
                            "name": "meta.class.declaration.cfml", 
                            "begin": "\\b(?:(abstract|final)\\s+)?(component)\\b"
                        }, 
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ], 
                            "end": "(?=})", 
                            "name": "meta.class.body.cfml", 
                            "begin": "\\{"
                        }
                    ], 
                    "end": "\\}", 
                    "begin": "(?i)^(?=\\s*(?:(abstract|final)\\s+)?(component)\\b)"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.interface.body.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "beginCaptures": {
                                "1": {
                                    "name": "storage.type.interface.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-comments"
                                }, 
                                {
                                    "include": "#source-cfml-script-component-attributes"
                                }
                            ], 
                            "end": "(?=\\{)", 
                            "name": "meta.interface.declaration.cfml", 
                            "begin": "\\b(interface)\\b"
                        }, 
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ], 
                            "end": "(?=})", 
                            "name": "meta.interface.body.cfml", 
                            "begin": "\\{"
                        }
                    ], 
                    "end": "\\}", 
                    "begin": "(?i)^(?=\\s*(interface)\\b)"
                }
            ]
        }, 
        "source-cfml-script-variable": {
            "patterns": [
                {
                    "include": "#source-cfml-script-cfml-scopes"
                }, 
                {
                    "name": "entity.name.class.cfml", 
                    "match": "[_$a-zA-Z][$\\w.]*(?=\\s*::)"
                }, 
                {
                    "name": "variable.other.struct.cfml", 
                    "match": "[_$a-zA-Z][$\\w]*(?=\\s*[\\[\\.])"
                }, 
                {
                    "name": "variable.other.constant.cfml", 
                    "match": "\\b[A-Z][_$\\dA-Z]*\\b"
                }, 
                {
                    "name": "entity.name.tag.cfml", 
                    "match": "(cfabort|cfadmin|cfajaximport|cfajaxproxy|cfapplet|cfapplication|cfargument|cfassociate|cfbreak|cfcache|cfcalendar|cfcase|cfcatch|cfchart|cfchartdata|cfchartseries|cfclient|cfclientsettings|cfcol|cfcollection|cfcomponent|cfcontent|cfcontinue|cfcookie|cfdbinfo|cfdefaultcase|cfdirectory|cfdiv|cfdocument|cfdocumentitem|cfdocumentsection|cfdump|cfelse|cfelseif|cferror|cfexchangecalendar|cfexchangeconnection|cfexchangecontact|cfexchangefilter|cfexchangemail|cfexchangetask|cfexecute|cfexit|cffeed|cffile|cffileupload|cffinally|cfflush|cfform|cfformgroup|cfformitem|cfftp|cffunction|cfgrid|cfgridcolumn|cfgridrow|cfgridupdate|cfheader|cfhtmlhead|cfhtmltopdf|cfhtmltopdfitem|cfhttp|cfhttpparam|cfif|cfimage|cfimap|cfimapfilter|cfimport|cfinclude|cfindex|cfinput|cfinsert|cfinterface|cfinvoke|cfinvokeargument|cflayout|cflayoutarea|cfldap|cflocation|cflock|cflog|cflogin|cfloginuser|cflogout|cfloop|cfmail|cfmailparam|cfmailpart|cfmap|cfmapitem|cfmediaplayer|cfmenu|cfmenuitem|cfmessagebox|cfmodule|cfntauthenticate|cfoauth|cfobject|cfobjectcache|cfoutput|cfparam|cfpdf|cfpdfform|cfpdfformparam|cfpdfparam|cfpdfsubform|cfpod|cfpop|cfpresentation|cfpresentationslide|cfpresenter|cfprint|cfprocessingdirective|cfprocparam|cfprocresult|cfprogressbar|cfproperty|cfquery|cfqueryparam|cfregistry|cfreport|cfreportparam|cfrethrow|cfretry|cfreturn|cfsavecontent|cfschedule|cfscript|cfsearch|cfselect|cfservlet|cfservletparam|cfset|cfsetting|cfsharepoint|cfsilent|cfsleep|cfslider|cfspreadsheet|cfsprydataset|cfstoredproc|cfswitch|cftable|cftextarea|cftextinput|cfthread|cfthrow|cftimer|cftooltip|cftrace|cftransaction|cftree|cftreeitem|cftry|cfupdate|cfwddx|cfwebsocket|cfwhile|cfwindow|cfxml|cfzip|cfzipparam|cf_socialplugin)[$\\w]*"
                }, 
                {
                    "name": "variable.other.readwrite.cfml", 
                    "match": "[_$a-zA-Z][$\\w]*"
                }
            ]
        }, 
        "source-cfml-script-struct-literal-function-keys": {
            "patterns": [
                {
                    "contentName": "entity.name.function.cfml", 
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.cfml"
                        }
                    }, 
                    "name": "meta.function.declaration.cfml meta.struct-literal.key.cfml string.quoted.single.cfml", 
                    "begin": "'", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml", 
                            "match": "''"
                        }, 
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }
                    ], 
                    "end": "(')(?!')"
                }, 
                {
                    "contentName": "entity.name.function.cfml", 
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.cfml"
                        }
                    }, 
                    "name": "meta.function.declaration.cfml meta.struct-literal.key.cfml string.quoted.double.cfml", 
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml", 
                            "match": "\"\""
                        }, 
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }
                    ], 
                    "end": "(\")(?!\")"
                }, 
                {
                    "name": "meta.function.declaration.cfml meta.struct-literal.key.cfml entity.name.function.cfml", 
                    "match": "[_$a-zA-Z][$\\w]*"
                }, 
                {
                    "name": "meta.function.declaration.cfml punctuation.separator.key-value.cfml", 
                    "match": "(:|=)"
                }
            ]
        }, 
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.cfml", 
                    "match": "<!---.*?--->"
                }, 
                {
                    "patterns": [
                        {
                            "include": "#comments"
                        }
                    ], 
                    "end": "--->", 
                    "name": "comment.block.cfml", 
                    "begin": "<!---"
                }
            ]
        }, 
        "source-cfml-script-tag-generic-attribute": {
            "patterns": [
                {
                    "include": "#source-cfml-script-comments"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "entity.other.attribute-name.cfml"
                        }
                    }, 
                    "match": "\\b([a-zA-Z0-9:-]+)\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.key-value.cfml"
                        }, 
                        "2": {
                            "name": "string.unquoted.cfml"
                        }
                    }, 
                    "match": "(=)\\s*((?:[^\\s<>/'\"{;]|/(?!/>))+)"
                }, 
                {
                    "name": "punctuation.separator.key-value.cfml", 
                    "match": "="
                }, 
                {
                    "include": "#source-cfml-script-tag-string"
                }
            ]
        }, 
        "source-cfml-script-static-method-call": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.end.cfml"
                        }
                    }, 
                    "name": "meta.function-call.method.static.cfml", 
                    "begin": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()", 
                    "beginCaptures": {
                        "1": {
                            "name": "variable.function.static.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-method-call-params"
                        }
                    ], 
                    "end": "\\)"
                }
            ]
        }, 
        "source-cfml-script-tag-generic-attribute-script": {
            "patterns": [
                {
                    "name": "meta.tag.script.cfml entity.other.attribute-name.cfml", 
                    "match": "\\b[a-zA-Z0-9:-]+\\b"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.key-value.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "(?=\\s*\\b([a-zA-Z0-9:-]+)\\s*=)|(?=[;\\{])", 
                    "name": "meta.tag.script.cfml", 
                    "begin": "="
                }
            ]
        }, 
        "string-quoted-double": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.cfml"
                }
            }, 
            "name": "string.quoted.double.cfml", 
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "include": "#hash-delimiters"
                }, 
                {
                    "name": "constant.character.escape.quote.cfml", 
                    "match": "\"\""
                }
            ], 
            "end": "\"(?!\")"
        }, 
        "source-cfml-script-function-declaration": {
            "patterns": [
                {
                    "captures": {
                        "0": {
                            "name": "meta.function.declaration.cfml"
                        }, 
                        "1": {
                            "name": "storage.type.function.cfml"
                        }
                    }, 
                    "match": "\\b(function)\\b\\s*"
                }, 
                {
                    "name": "meta.function.declaration.cfml entity.name.function.cfml", 
                    "match": "[_$a-zA-Z][$\\w]*"
                }, 
                {
                    "include": "#source-cfml-script-function-declaration-parameters"
                }
            ], 
            "end": "(?=\\{)", 
            "begin": "(?=\\s*\\bfunction\\b)"
        }, 
        "source-cfml-script-parens-block-scope": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.end.cfml"
                        }
                    }, 
                    "name": "meta.group.cfml", 
                    "begin": "\\(", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "\\)"
                }, 
                {
                    "include": "#source-cfml-script-block-scope"
                }
            ]
        }, 
        "source-cfml-script-component-attributes": {
            "patterns": [
                {
                    "endCaptures": {
                        "8": {
                            "name": "punctuation.definition.string.end.cfml"
                        }, 
                        "9": {
                            "name": "string.unquoted.cfml entity.other.inherited-class.cfml"
                        }, 
                        "4": {
                            "name": "punctuation.definition.string.end.cfml"
                        }, 
                        "5": {
                            "name": "string.quoted.single.cfml"
                        }, 
                        "6": {
                            "name": "punctuation.definition.string.begin.cfml"
                        }, 
                        "7": {
                            "name": "entity.other.inherited-class.cfml"
                        }, 
                        "1": {
                            "name": "string.quoted.double.cfml"
                        }, 
                        "2": {
                            "name": "punctuation.definition.string.begin.cfml"
                        }, 
                        "3": {
                            "name": "entity.other.inherited-class.cfml"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "entity.other.attribute-name.cfml storage.modifier.extends.cfml"
                        }, 
                        "2": {
                            "name": "punctuation.separator.key-value.cfml"
                        }
                    }, 
                    "end": "((\")([a-zA-Z0-9:.]+)?(\"))|((')([a-zA-Z0-9:.]+)?('))|([a-zA-Z0-9:.]+)|(?=[^a-zA-Z0-9:.])", 
                    "name": "meta.class.inheritance.cfml", 
                    "begin": "(?i)\\b(extends)\\s*(=)\\s*"
                }, 
                {
                    "include": "#source-cfml-script-tag-generic-attribute"
                }
            ]
        }, 
        "source-cfml-script-main": {
            "patterns": [
                {
                    "include": "#source-cfml-script-keywords-top-level"
                }, 
                {
                    "include": "#source-cfml-script-component"
                }, 
                {
                    "include": "#source-cfml-script-statements"
                }
            ]
        }, 
        "source-css-cfoutput-property-values": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "name": "support.constant.property-value.css", 
                    "match": "\\b(absolute|all(-scroll)?|always|armenian|auto|avoid|baseline|below|bidi-override|block|bold|bolder|both|bottom|break-all|break-word|capitalize|center|char|circle|cjk-ideographic|col-resize|collapse|crosshair|dashed|decimal-leading-zero|decimal|default|disabled|disc|distribute-all-lines|distribute-letter|distribute-space|distribute|dotted|double|e-resize|ellipsis|fixed|geometricPrecision|georgian|groove|hand|hebrew|help|hidden|hiragana-iroha|hiragana|horizontal|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space|inactive|inherit|inline-block|inline|inset|inside|inter-ideograph|inter-word|italic|justify|katakana-iroha|katakana|keep-all|left|lighter|line-edge|line-through|line|list-item|loose|lower-alpha|lower-greek|lower-latin|lower-roman|lowercase|lr-tb|ltr|medium|middle|move|n-resize|ne-resize|newspaper|no-drop|no-repeat|nw-resize|none|normal|not-allowed|nowrap|oblique|optimize(Legibility|Quality|Speed)|outset|outside|overline|pointer|pre(-(wrap|line))?|progress|relative|repeat-x|repeat-y|repeat|right|ridge|row-resize|rtl|s-resize|scroll|se-resize|separate|small-caps|solid|square|static|strict|sub|super|sw-resize|table-footer-group|table-header-group|tb-rl|text-bottom|text-top|text|thick|thin|top|transparent|underline|upper-alpha|upper-latin|upper-roman|uppercase|vertical(-(ideographic|text))?|visible(Painted|Fill|Stroke)?|w-resize|wait|whitespace|zero|smaller|larger|((xx?-)?(small|large))|painted|fill|stroke)\\b"
                }, 
                {
                    "name": "support.constant.font-name.css", 
                    "match": "(\\b(?i:arial|century|comic|courier|garamond|georgia|helvetica|impact|lucida|symbol|system|tahoma|times|trebuchet|utopia|verdana|webdings|sans-serif|serif|monospace)\\b)"
                }, 
                {
                    "include": "#source-css-cfoutput-numeric-values"
                }, 
                {
                    "include": "#source-css-cfoutput-color-values"
                }, 
                {
                    "include": "#source-css-cfoutput-string-double"
                }, 
                {
                    "include": "#source-css-cfoutput-string-single"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.misc.css"
                        }, 
                        "2": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-css-cfoutput-numeric-values"
                        }
                    ], 
                    "end": "(\\))", 
                    "begin": "(rect)\\s*(\\()"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.misc.css"
                        }, 
                        "2": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-css-cfoutput-string-single"
                        }, 
                        {
                            "include": "#source-css-cfoutput-string-double"
                        }, 
                        {
                            "name": "variable.parameter.misc.css", 
                            "match": "[^'\") \\t]+"
                        }
                    ], 
                    "end": "(\\))", 
                    "begin": "(format|local|url|attr|counter|counters)\\s*(\\()"
                }, 
                {
                    "name": "keyword.other.important.css", 
                    "match": "\\!\\s*important"
                }
            ]
        }, 
        "source-cfml-script-string": {
            "patterns": [
                {
                    "include": "#source-cfml-script-string-quoted-single"
                }, 
                {
                    "include": "#source-cfml-script-string-quoted-double"
                }
            ]
        }, 
        "source-cfml-script-constants": {
            "patterns": [
                {
                    "name": "constant.language.boolean.true.cfml", 
                    "match": "\\btrue\\b"
                }, 
                {
                    "name": "constant.language.boolean.false.cfml", 
                    "match": "\\bfalse\\b"
                }, 
                {
                    "name": "constant.language.null.cfml", 
                    "match": "\\bnull\\b"
                }
            ]
        }, 
        "source-cfml-script-support-method-call": {
            "contentName": "meta.function-call.parameters.method.support.cfml", 
            "endCaptures": {
                "0": {
                    "name": "meta.function-call.parameters.method.support.cfml punctuation.definition.group.end.cfml"
                }
            }, 
            "name": "meta.function-call.method.support.cfml", 
            "begin": "(?x)\n(?i:\n  (add|addcolumn|addrow|append|avg|blur|cjustify|clear|clearrect|columnarray|columncount|columndata|columnexists\n  |columnlist|compare|comparenocase|contains|containsnocase|copy|count|crop|currentrow|dateformat|day|dayofweek\n  |dayofyear|daysinmonth|daysinyear|delete|deleteat|deletecolumn|deleterow|diff|drawarc|drawcubiccurve|drawline\n  |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|each|every|filter|find|findall\n  |findallnocase|findkey|findnocase|findoneof|findvalue|first|firstdayofmonth|flip|get|getbufferedimage|getcell\n  |getheight|getrow|gettoken|getwidth|grayscale|hour|indexexists|info|insert|insertat|isdefined|isempty|keyarray\n  |keyexists|keylist|keytranslate|last|lcase|left|len|listappend|listavg|listchangedelims|listcompact|listcontains\n  |listcontainsnocase|listdeleteat|listeach|listevery|listfilter|listfind|listfindnocase|listfirst|listgetat\n  |listindexexists|listinsertat|listitemtrim|listlast|listlen|listmap|listprepend|listqualify|listreduce\n  |listremoveduplicates|listrest|listsetat|listsome|listsort|listtoarray|listvaluecount|listvaluecountnocase\n  |ljustify|lsdateformat|lsdayofweek|ltrim|map|max|median|merge|mid|min|minute|month|overlay|part|paste|prepend\n  |quarter|recordcount|reduce|refind|refindnocase|rematch|rematchnocase|removechars|repeatstring|replace|replacenocase\n  |rereplace|rereplacenocase|resize|reverse|right|rowdata|rtrim|scaletofit|second|set|setantialiasing|setcell\n  |setdrawingstroke|sharpen|slice|some|sort|spanexcluding|spanincluding|stripcr|sum|swap|tolist|tostruct|translate\n  |trim|ucase|update|week|wrap|writebase64|year)\n)(\\()", 
            "beginCaptures": {
                "1": {
                    "name": "support.function.member.cfml"
                }, 
                "2": {
                    "name": "meta.function-call.parameters.method.support.cfml punctuation.definition.group.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "name": "punctuation.separator.function-call.method.support.cfml", 
                    "match": ","
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "entity.other.method-parameter.cfml"
                        }, 
                        "2": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "(?=[,\\)])", 
                    "begin": "\\b([_$a-zA-Z][$\\w\\.]*)\\s*(=)(?!=)"
                }, 
                {
                    "include": "#source-cfml-script-expressions"
                }
            ], 
            "end": "\\)"
        }, 
        "source-css-cfoutput-comment-block": {
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.css"
                }
            }, 
            "end": "\\*/", 
            "name": "comment.block.css", 
            "begin": "/\\*"
        }, 
        "cfinterface": {
            "endCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                }, 
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                }, 
                "2": {
                    "name": "entity.name.tag.cfml storage.type.interface.cfml"
                }, 
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            }, 
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "name": "meta.tag.cfml meta.interface.cfml", 
                    "begin": "(?i)(<)(cfinterface)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.cfml storage.type.interface.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#extends"
                        }, 
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": ">"
                }, 
                {
                    "include": "#cfml-tags"
                }
            ], 
            "end": "(?i)(</)(cfinterface)(>)", 
            "begin": "(?i)(?=<cfinterface)"
        }, 
        "source-cfml-script-function-parameter": {
            "patterns": [
                {
                    "name": "punctuation.separator.function.cfml", 
                    "match": ","
                }, 
                {
                    "name": "keyword.other.required.argument.cfml", 
                    "match": "(?i:required)"
                }, 
                {
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.cfml"
                        }, 
                        "2": {
                            "name": "variable.parameter.function.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-tag-generic-attribute"
                                }
                            ], 
                            "end": "(?=[,)])", 
                            "begin": "(?=[_$a-zA-Z][$\\w]*)"
                        }, 
                        {
                            "beginCaptures": {
                                "4": {
                                    "name": "constant.language.null.cfml"
                                }, 
                                "5": {
                                    "name": "variable.other.readwrite.cfml"
                                }, 
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                }, 
                                "2": {
                                    "name": "constant.language.boolean.true.cfml"
                                }, 
                                "3": {
                                    "name": "constant.language.boolean.false.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "endCaptures": {
                                        "0": {
                                            "name": "variable.other.readwrite.cfml"
                                        }
                                    }, 
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-operators"
                                        }
                                    ], 
                                    "end": "[_$a-zA-Z][$\\w]*", 
                                    "begin": "(?=\\s*([+\\-*/&%])\\s*[_$a-zA-Z][$\\w]*)"
                                }, 
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ], 
                            "end": "(?=([_$a-zA-Z][$\\w]*|[,)]))", 
                            "name": "meta.parameter.optional.cfml", 
                            "begin": "(=)\\s*(?i:(\\btrue\\b)|(\\bfalse\\b)|(\\bnull\\b)|([_$a-zA-Z][$\\w]*))?"
                        }
                    ], 
                    "end": "(?=[,)])", 
                    "begin": "(?:([_$a-zA-Z][$\\w]*)\\s+)?([_$a-zA-Z][$\\w.]*)"
                }, 
                {
                    "include": "#source-cfml-script-comments"
                }
            ]
        }, 
        "source-css-cfoutput": {
            "patterns": [
                {
                    "include": "#source-css-cfoutput-comment-block"
                }, 
                {
                    "include": "#source-css-cfoutput-selector"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.control.at-rule.charset.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.keyword.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-css-cfoutput-string-double"
                        }, 
                        {
                            "include": "#source-css-cfoutput-string-single"
                        }
                    ], 
                    "end": "\\s*((?=;|$))", 
                    "name": "meta.at-rule.charset.css", 
                    "begin": "\\s*((@)charset\\b)\\s*"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.control.at-rule.import.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.keyword.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-css-cfoutput-string-double"
                        }, 
                        {
                            "include": "#source-css-cfoutput-string-single"
                        }, 
                        {
                            "endCaptures": {
                                "1": {
                                    "name": "punctuation.section.function.css"
                                }
                            }, 
                            "beginCaptures": {
                                "1": {
                                    "name": "support.function.url.css"
                                }, 
                                "2": {
                                    "name": "punctuation.section.function.css"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfoutput-injection"
                                }, 
                                {
                                    "name": "variable.parameter.url.css", 
                                    "match": "[^'\") \\t]+"
                                }, 
                                {
                                    "include": "#source-css-cfoutput-string-single"
                                }, 
                                {
                                    "include": "#source-css-cfoutput-string-double"
                                }
                            ], 
                            "end": "\\s*(\\))\\s*", 
                            "begin": "\\s*(url)\\s*(\\()\\s*"
                        }, 
                        {
                            "include": "#source-css-cfoutput-media-query-list"
                        }
                    ], 
                    "end": "\\s*((?=;|\\}))", 
                    "name": "meta.at-rule.import.css", 
                    "begin": "\\s*((@)import\\b)\\s*"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.property-list.css"
                        }
                    }, 
                    "name": "meta.at-rule.font-face.css", 
                    "begin": "^\\s*((@)font-face)\\s*(?=\\{)", 
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.at-rule.font-face.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.keyword.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-css-cfoutput-rule-list"
                        }
                    ], 
                    "end": "\\s*(\\})"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.property-list.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.control.at-rule.media.css"
                                }, 
                                "2": {
                                    "name": "punctuation.definition.keyword.css"
                                }, 
                                "3": {
                                    "name": "support.constant.media.css"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfoutput-injection"
                                }, 
                                {
                                    "include": "#source-css-cfoutput-media-query-list"
                                }
                            ], 
                            "end": "\\s*(?=\\{)", 
                            "name": "meta.at-rule.media.css", 
                            "begin": "^\\s*((@)media)(?=.*?\\{)"
                        }, 
                        {
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.section.property-list.css"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfoutput-injection"
                                }, 
                                {
                                    "include": "#source-css-cfoutput"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "begin": "\\s*(\\{)"
                        }
                    ], 
                    "end": "\\s*(\\})", 
                    "begin": "(?=^\\s*@media\\s*.*?\\{)"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.property-list.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-css-cfoutput-rule-list"
                        }
                    ], 
                    "end": "\\}", 
                    "begin": "(?=\\{)"
                }
            ]
        }, 
        "source-cfml-script-expressions": {
            "patterns": [
                {
                    "include": "#source-cfml-script-comments"
                }, 
                {
                    "include": "#source-cfml-script-string"
                }, 
                {
                    "include": "#source-cfml-script-constructor"
                }, 
                {
                    "include": "#source-cfml-script-operators"
                }, 
                {
                    "include": "#source-cfml-script-keywords"
                }, 
                {
                    "include": "#source-cfml-script-constants"
                }, 
                {
                    "include": "#source-cfml-script-named-function"
                }, 
                {
                    "include": "#source-cfml-script-anonymous-function"
                }, 
                {
                    "include": "#source-cfml-script-struct-literal"
                }, 
                {
                    "include": "#source-cfml-script-brackets"
                }, 
                {
                    "include": "#source-cfml-script-number"
                }, 
                {
                    "include": "#source-cfml-script-call"
                }, 
                {
                    "include": "#source-cfml-script-variable"
                }, 
                {
                    "include": "#source-cfml-script-punctuation"
                }
            ]
        }, 
        "text-html-cfml-cfoutput-string-double-quoted": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.html"
                }
            }, 
            "name": "string.quoted.double.html", 
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.html"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "include": "#text-html-cfml-cfoutput-entities"
                }
            ], 
            "end": "\""
        }, 
        "text-html-cfml-string-single-quoted": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.html"
                }
            }, 
            "name": "string.quoted.single.html", 
            "begin": "'", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.html"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "include": "#text-html-cfml-entities"
                }
            ], 
            "end": "'"
        }, 
        "string": {
            "patterns": [
                {
                    "include": "#string-quoted-single"
                }, 
                {
                    "include": "#string-quoted-double"
                }
            ]
        }, 
        "cfscript": {
            "contentName": "source.cfml.script", 
            "endCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                }, 
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                }, 
                "2": {
                    "name": "entity.name.tag.cfml"
                }, 
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            }, 
            "begin": "(?i)(<)(cfscript)(\\s+|>)", 
            "beginCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                }, 
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                }, 
                "2": {
                    "name": "entity.name.tag.cfml"
                }, 
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            }, 
            "patterns": [
                {
                    "include": "#comments"
                }, 
                {
                    "include": "#source-cfml-script"
                }
            ], 
            "end": "(?i)(</)(cfscript)(>)"
        }, 
        "source-sql-comments": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.sql"
                        }
                    }, 
                    "name": "comment.line.double-dash.sql", 
                    "match": "(--).*$\\n?"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.sql"
                        }
                    }, 
                    "name": "comment.line.number-sign.sql", 
                    "match": "(#).*$\\n?"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.sql"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.c", 
                    "begin": "/\\*"
                }
            ]
        }, 
        "text-html-cfml": {
            "patterns": [
                {
                    "endCaptures": {
                        "4": {
                            "name": "entity.name.tag.html"
                        }, 
                        "5": {
                            "name": "punctuation.definition.tag.end.html"
                        }, 
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }, 
                        "2": {
                            "name": "punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html"
                        }, 
                        "3": {
                            "name": "punctuation.definition.tag.begin.html"
                        }
                    }, 
                    "name": "meta.tag.any.html", 
                    "begin": "(<)([a-zA-Z0-9:]++)(?=[^>]*></\\2>)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-tag-stuff"
                        }
                    ], 
                    "end": "(>)(<)(/)(\\2)(>)"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.xml.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-tag-generic-attribute"
                        }, 
                        {
                            "include": "#text-html-cfml-string-double-quoted"
                        }, 
                        {
                            "include": "#text-html-cfml-string-single-quoted"
                        }
                    ], 
                    "end": "(\\?>)", 
                    "name": "meta.tag.preprocessor.xml.html", 
                    "begin": "(<\\?)(xml)"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "name": "invalid.illegal.bad-comments-or-CDATA.html", 
                            "match": "--"
                        }
                    ], 
                    "end": "--\\s*>", 
                    "name": "comment.block.html", 
                    "begin": "<!--"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.tag.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "captures": {
                                "1": {
                                    "name": "entity.name.tag.doctype.html"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfml-tags"
                                }, 
                                {
                                    "name": "string.quoted.double.doctype.identifiers-and-DTDs.html", 
                                    "match": "\"[^\">]*\""
                                }
                            ], 
                            "end": "(?=>)", 
                            "name": "meta.tag.sgml.doctype.html", 
                            "begin": "(?i:DOCTYPE)"
                        }, 
                        {
                            "end": "]](?=>)", 
                            "name": "constant.other.inline-data.html", 
                            "begin": "\\[CDATA\\["
                        }, 
                        {
                            "name": "invalid.illegal.bad-comments-or-CDATA.html", 
                            "match": "(\\s*)(?!--|>)\\S(\\s*)"
                        }
                    ], 
                    "end": ">", 
                    "name": "meta.tag.sgml.html", 
                    "begin": "<!"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.style.html"
                        }, 
                        "3": {
                            "name": "punctuation.definition.tag.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-tag-stuff"
                        }, 
                        {
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.definition.tag.end.html"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfml-tags"
                                }, 
                                {
                                    "include": "#source-css"
                                }
                            ], 
                            "end": "(?=</(?i:style))", 
                            "begin": "(>)"
                        }
                    ], 
                    "end": "(</)((?i:style))(>)(?:\\s*\\n)?", 
                    "name": "source.css.embedded.html", 
                    "begin": "(?:^\\s+)?(<)((?i:style))\\b(?![^>]*/>)"
                }, 
                {
                    "endCaptures": {
                        "2": {
                            "name": "punctuation.definition.tag.html"
                        }
                    }, 
                    "name": "source.js.embedded.html", 
                    "begin": "(?:^\\s+)?(<)((?i:script))\\b(?![^>]*/>)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.script.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-tag-stuff"
                        }, 
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.tag.begin.html"
                                }, 
                                "2": {
                                    "name": "entity.name.tag.script.html"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfml-tags"
                                }, 
                                {
                                    "captures": {
                                        "1": {
                                            "name": "punctuation.definition.comment.js"
                                        }
                                    }, 
                                    "name": "comment.line.double-slash.js", 
                                    "match": "(//).*?((?=</script)|$\\n?)"
                                }, 
                                {
                                    "captures": {
                                        "0": {
                                            "name": "punctuation.definition.comment.js"
                                        }
                                    }, 
                                    "end": "\\*/|(?=</script)", 
                                    "name": "comment.block.js", 
                                    "begin": "/\\*"
                                }, 
                                {
                                    "include": "#source-js"
                                }
                            ], 
                            "end": "(</)((?i:script))", 
                            "begin": "(?<!</(?:script|SCRIPT))(>)"
                        }
                    ], 
                    "end": "(?<=</(script|SCRIPT))(>)(?:\\s*\\n)?"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }
                    }, 
                    "name": "meta.tag.structure.any.html", 
                    "begin": "(</?)((?i:body|head|html)\\b)", 
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.structure.any.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-tag-stuff"
                        }
                    ], 
                    "end": "(>)"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }
                    }, 
                    "name": "meta.tag.block.any.html", 
                    "begin": "(</?)((?i:address|blockquote|dd|div|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\\b)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.block.any.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-tag-stuff"
                        }
                    ], 
                    "end": "(>)"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }
                    }, 
                    "name": "meta.tag.inline.any.html", 
                    "begin": "(</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\\b)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.inline.any.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-tag-stuff"
                        }
                    ], 
                    "end": "((?: ?/)?>)"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }
                    }, 
                    "name": "meta.tag.other.html", 
                    "begin": "(</?)([a-zA-Z0-9:]+)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.other.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-tag-stuff"
                        }
                    ], 
                    "end": "(>)"
                }, 
                {
                    "include": "#text-html-cfml-entities"
                }, 
                {
                    "name": "invalid.illegal.incomplete.html", 
                    "match": "<>"
                }, 
                {
                    "name": "invalid.illegal.bad-angle-bracket.html", 
                    "match": "<"
                }
            ]
        }, 
        "source-css-cfoutput-string-double": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.css"
                }
            }, 
            "name": "string.quoted.double.css", 
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.css"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "name": "constant.character.escape.css", 
                    "match": "\\\\."
                }
            ], 
            "end": "\""
        }, 
        "source-cfml-script-tag-in-script-cf": {
            "patterns": [
                {
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "captures": {
                                "1": {
                                    "name": "entity.other.attribute-name.cfml"
                                }
                            }, 
                            "match": "\\b([a-zA-Z0-9:-]+)\\b"
                        }, 
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.separator.key-value.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ], 
                            "end": "(?=\\s*\\b([a-zA-Z0-9:-]+)\\s*=)|(?=\\))", 
                            "begin": "="
                        }
                    ], 
                    "end": "\\)", 
                    "name": "meta.tag.script.cf.cfml", 
                    "begin": "(?x)(?i)\n  (cf\n  (?:ajaximport|ajaxproxy|applet|application|argument|associate|break|cache|calendar\n  |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo\n  |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar\n  |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask\n  |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn\n  |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image\n  |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout\n  |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart\n  |map|mapitem|mediaplayer|menu|menuitem|messagebox|module|ntauthenticate|oauth|object\n  |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop\n  |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult\n  |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule\n  |search|select|setting|sharepoint|silent|slider|spreadsheet|sprydataset|storedproc\n  |table|textarea|textinput|thread|throw|timer|tooltip|trace|transaction|tree|treeitem|try\n  |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)\n)\\("
                }
            ]
        }, 
        "source-css-comment-block": {
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.css"
                }
            }, 
            "end": "\\*/", 
            "name": "comment.block.css", 
            "begin": "/\\*"
        }, 
        "cfargument": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "name": "meta.tag.cfml meta.tag.argument.cfml", 
                    "begin": "(?i)(<)(cfargument)\\b", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": "(/?>)"
                }
            ]
        }, 
        "cfquery": {
            "endCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                }, 
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                }, 
                "2": {
                    "name": "entity.name.tag.cfml"
                }, 
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            }, 
            "patterns": [
                {
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": "(?=>)", 
                    "name": "meta.tag.cfml", 
                    "begin": "(?i)(<)(cfquery)(?=\\s|>)"
                }, 
                {
                    "contentName": "meta.scope.cfquery.cfml source.sql", 
                    "beginCaptures": {
                        "0": {
                            "name": "meta.tag.cfml punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#hash-delimiters"
                        }, 
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#source-sql"
                        }
                    ], 
                    "end": "(?i)(?=</cfquery>)", 
                    "begin": ">"
                }
            ], 
            "end": "(?i)(</)(cfquery)(>)", 
            "begin": "(?i)(?=<cfquery\\b)"
        }, 
        "source-css-cfoutput-color-values": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "comment": "http://www.w3.org/TR/CSS21/syndata.html#value-def-color", 
                    "name": "support.constant.color.w3c-standard-color-name.css", 
                    "match": "\\b(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)\\b"
                }, 
                {
                    "comment": "These colours are mostly recognised but will not validate. ref: http://www.w3schools.com/css/css_colornames.asp", 
                    "name": "invalid.deprecated.color.w3c-non-standard-color-name.css", 
                    "match": "\\b(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato|turquoise|violet|wheat|whitesmoke|yellowgreen)\\b"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.misc.css"
                        }, 
                        "2": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "name": "constant.other.color.rgb-value.css", 
                            "match": "(?x)\\b\n                                (0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\\s*,\\s*){2}\n                                (0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\\b)\n                                (\\s*,\\s*((0?\\.[0-9]+)|[0-1]))?\n                            "
                        }, 
                        {
                            "name": "constant.other.color.rgb-percentage.css", 
                            "match": "\\b([0-9]{1,2}|100)\\s*%,\\s*([0-9]{1,2}|100)\\s*%,\\s*([0-9]{1,2}|100)\\s*%"
                        }, 
                        {
                            "include": "#source-css-cfoutput-numeric-values"
                        }
                    ], 
                    "end": "(\\))", 
                    "begin": "(hsla?|rgba?)\\s*(\\()"
                }
            ]
        }, 
        "source-css-cfoutput-rule-list": {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.property-list.css"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "include": "#source-css-cfoutput-comment-block"
                }, 
                {
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "name": "support.type.property-name.css", 
                            "match": "\\b(azimuth|background-attachment|background-color|background-image|background-position|background-repeat|background|box-shadow|border-radius|border-bottom-color|border-bottom-style|border-bottom-width|border-bottom|border-collapse|border-color|border-left-color|border-left-style|border-left-width|border-left|border-right-color|border-right-style|border-right-width|border-right|border-spacing|border-style|border-top-color|border-top-style|border-top-width|border-top|border-width|border|bottom|caption-side|clear|clip|color|content|counter-increment|counter-reset|cue-after|cue-before|cue|cursor|direction|display|elevation|empty-cells|float|font-family|font-size-adjust|font-size|font-stretch|font-style|font-variant|font-weight|font|height|image-rendering|left|letter-spacing|line-height|list-style-image|list-style-position|list-style-type|list-style|margin-bottom|margin-left|margin-right|margin-top|marker-offset|margin|marks|max-height|max-width|min-height|min-width|-moz-border-radius|opacity|orphans|outline-color|outline-style|outline-width|outline|overflow(-[xy])?|padding-bottom|padding-left|padding-right|padding-top|padding|page-break-after|page-break-before|page-break-inside|page|pause-after|pause-before|pause|pitch-range|pitch|play-during|pointer-events|position|quotes|resize|richness|right|size|speak-header|speak-numeral|speak-punctuation|speech-rate|speak|src|stress|table-layout|text-(align|decoration|indent|rendering|shadow|transform)|top|unicode-bidi|vertical-align|visibility|voice-family|volume|white-space|widows|width|word-(spacing|wrap)|zoom|z-index)\\b"
                        }
                    ], 
                    "end": "$|(?![-a-z])", 
                    "name": "meta.property-name.css", 
                    "begin": "(?<![-a-z])(?=[-a-z])"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.terminator.rule.css"
                        }
                    }, 
                    "name": "meta.property-value.css", 
                    "begin": "(:)\\s*", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.key-value.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-css-cfoutput-property-values"
                        }
                    ], 
                    "end": "\\s*(;|(?=\\}))"
                }
            ], 
            "end": "(?=\\s*\\})", 
            "name": "meta.property-list.css", 
            "begin": "\\{"
        }, 
        "text-html-cfml-entities": {
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.html"
                        }, 
                        "3": {
                            "name": "punctuation.definition.entity.html"
                        }
                    }, 
                    "name": "constant.character.entity.html", 
                    "match": "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
                }, 
                {
                    "name": "invalid.illegal.bad-ampersand.html", 
                    "match": "&"
                }
            ]
        }, 
        "text-html-cfml-cfoutput": {
            "patterns": [
                {
                    "endCaptures": {
                        "4": {
                            "name": "entity.name.tag.html"
                        }, 
                        "5": {
                            "name": "punctuation.definition.tag.end.html"
                        }, 
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }, 
                        "2": {
                            "name": "punctuation.definition.tag.begin.html meta.scope.between-tag-pair.html"
                        }, 
                        "3": {
                            "name": "punctuation.definition.tag.begin.html"
                        }
                    }, 
                    "name": "meta.tag.any.html", 
                    "begin": "(<)([a-zA-Z0-9:]++)(?=[^>]*></\\2>)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-tag-stuff"
                        }
                    ], 
                    "end": "(>)(<)(/)(\\2)(>)"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.xml.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-tag-generic-attribute"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-string-double-quoted"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-string-single-quoted"
                        }
                    ], 
                    "end": "(\\?>)", 
                    "name": "meta.tag.preprocessor.xml.html", 
                    "begin": "(<\\?)(xml)"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "name": "invalid.illegal.bad-comments-or-CDATA.html", 
                            "match": "--"
                        }
                    ], 
                    "end": "--\\s*>", 
                    "name": "comment.block.html", 
                    "begin": "<!--"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.tag.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "captures": {
                                "1": {
                                    "name": "entity.name.tag.doctype.html"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfoutput-injection"
                                }, 
                                {
                                    "name": "string.quoted.double.doctype.identifiers-and-DTDs.html", 
                                    "match": "\"[^\">]*\""
                                }
                            ], 
                            "end": "(?=>)", 
                            "name": "meta.tag.sgml.doctype.html", 
                            "begin": "(?i:DOCTYPE)"
                        }, 
                        {
                            "end": "]](?=>)", 
                            "name": "constant.other.inline-data.html", 
                            "begin": "\\[CDATA\\["
                        }, 
                        {
                            "name": "invalid.illegal.bad-comments-or-CDATA.html", 
                            "match": "(\\s*)(?!--|>)\\S(\\s*)"
                        }
                    ], 
                    "end": ">", 
                    "name": "meta.tag.sgml.html", 
                    "begin": "<!"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.style.html"
                        }, 
                        "3": {
                            "name": "punctuation.definition.tag.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-tag-stuff"
                        }, 
                        {
                            "beginCaptures": {
                                "1": {
                                    "name": "punctuation.definition.tag.end.html"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfoutput-injection"
                                }, 
                                {
                                    "include": "#source-css-cfoutput"
                                }
                            ], 
                            "end": "(?=</(?i:style))", 
                            "begin": "(>)"
                        }
                    ], 
                    "end": "(</)((?i:style))(>)(?:\\s*\\n)?", 
                    "name": "source.css.embedded.html", 
                    "begin": "(?:^\\s+)?(<)((?i:style))\\b(?![^>]*/>)"
                }, 
                {
                    "endCaptures": {
                        "2": {
                            "name": "punctuation.definition.tag.html"
                        }
                    }, 
                    "name": "source.js.embedded.html", 
                    "begin": "(?:^\\s+)?(<)((?i:script))\\b(?![^>]*/>)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.script.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-tag-stuff"
                        }, 
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.tag.begin.html"
                                }, 
                                "2": {
                                    "name": "entity.name.tag.script.html"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#cfoutput-injection"
                                }, 
                                {
                                    "captures": {
                                        "1": {
                                            "name": "punctuation.definition.comment.js"
                                        }
                                    }, 
                                    "name": "comment.line.double-slash.js", 
                                    "match": "(//).*?((?=</script)|$\\n?)"
                                }, 
                                {
                                    "captures": {
                                        "0": {
                                            "name": "punctuation.definition.comment.js"
                                        }
                                    }, 
                                    "end": "\\*/|(?=</script)", 
                                    "name": "comment.block.js", 
                                    "begin": "/\\*"
                                }, 
                                {
                                    "include": "#source-js-cfoutput"
                                }
                            ], 
                            "end": "(</)((?i:script))", 
                            "begin": "(?<!</(?:script|SCRIPT))(>)"
                        }
                    ], 
                    "end": "(?<=</(script|SCRIPT))(>)(?:\\s*\\n)?"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }
                    }, 
                    "name": "meta.tag.structure.any.html", 
                    "begin": "(</?)((?i:body|head|html)\\b)", 
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.structure.any.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-tag-stuff"
                        }
                    ], 
                    "end": "(>)"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }
                    }, 
                    "name": "meta.tag.block.any.html", 
                    "begin": "(</?)((?i:address|blockquote|dd|div|dl|dt|fieldset|form|frame|frameset|h1|h2|h3|h4|h5|h6|iframe|noframes|object|ol|p|ul|applet|center|dir|hr|menu|pre)\\b)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.block.any.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-tag-stuff"
                        }
                    ], 
                    "end": "(>)"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }
                    }, 
                    "name": "meta.tag.inline.any.html", 
                    "begin": "(</?)((?i:a|abbr|acronym|area|b|base|basefont|bdo|big|br|button|caption|cite|code|col|colgroup|del|dfn|em|font|head|html|i|img|input|ins|isindex|kbd|label|legend|li|link|map|meta|noscript|optgroup|option|param|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|var)\\b)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.inline.any.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-tag-stuff"
                        }
                    ], 
                    "end": "((?: ?/)?>)"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }
                    }, 
                    "name": "meta.tag.other.html", 
                    "begin": "(</?)([a-zA-Z0-9:]+)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        }, 
                        "2": {
                            "name": "entity.name.tag.other.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-tag-stuff"
                        }
                    ], 
                    "end": "(>)"
                }, 
                {
                    "include": "#text-html-cfml-cfoutput-entities"
                }, 
                {
                    "name": "invalid.illegal.incomplete.html", 
                    "match": "<>"
                }, 
                {
                    "name": "invalid.illegal.bad-angle-bracket.html", 
                    "match": "<"
                }
            ]
        }, 
        "source-cfml-script-tag-string": {
            "patterns": [
                {
                    "include": "#source-cfml-script-tag-string-quoted-single"
                }, 
                {
                    "include": "#source-cfml-script-string-quoted-double"
                }
            ]
        }, 
        "source-cfml-script-hash-delimiters": {
            "patterns": [
                {
                    "name": "constant.character.escape.hash.cfml", 
                    "match": "##"
                }, 
                {
                    "contentName": "source.cfml.script", 
                    "endCaptures": {
                        "0": {
                            "name": "constant.character.hash.cfml.end"
                        }
                    }, 
                    "begin": "#", 
                    "beginCaptures": {
                        "0": {
                            "name": "constant.character.hash.cfml.start"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "#"
                }
            ]
        }, 
        "source-cfml-script-named-function": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "beginCaptures": {
                        "8": {
                            "name": "meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                        }, 
                        "9": {
                            "name": "storage.type.function.cfml"
                        }, 
                        "4": {
                            "name": "storage.type.return-type.primitive.cfml"
                        }, 
                        "5": {
                            "name": "storage.type.return-type.object.cfml"
                        }, 
                        "6": {
                            "name": "storage.type.return-type.object.array.cfml"
                        }, 
                        "7": {
                            "name": "meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                        }, 
                        "0": {
                            "name": "meta.function.declaration.cfml"
                        }, 
                        "1": {
                            "name": "storage.modifier.cfml"
                        }, 
                        "10": {
                            "name": "entity.name.function.constructor.cfml"
                        }, 
                        "3": {
                            "name": "storage.type.return-type.void.cfml"
                        }, 
                        "2": {
                            "name": "storage.modifier.cfml"
                        }, 
                        "11": {
                            "name": "entity.name.function.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-function-declaration-parameters"
                        }, 
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "name": "meta.function.body.cfml", 
                            "begin": "\\{"
                        }
                    ], 
                    "end": "\\}|(?=;)", 
                    "begin": "(?x)\n(?:\n  (?:\n    (?i:\\b(private|package|public|remote|static|final|abstract)\\s+)?\n    (?i:\\b(private|package|public|remote|static|final|abstract)\\s+)?\n    (?i:\\b\n      (void)\\s+\n      |\n      (any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid)\\s+\n      |\n      ([A-Za-z0-9_\\.$]+)\\s+\n      |\n      ([A-Za-z0-9_\\.$]+)(\\[)(\\])?\\s+\n    )?\n  )\n)\n(?i:(function))\n\\s+\n(?:\n  (init)\n  |\n  ([_$a-zA-Z][$\\w]*)\n)\\b"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "name": "meta.function.body.cfml", 
                            "begin": "\\{"
                        }, 
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        }, 
                        {
                            "include": "#source-cfml-script-function-declaration"
                        }, 
                        {
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.accessor.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-cfml-scopes"
                                }, 
                                {
                                    "name": "support.class.cfml", 
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ], 
                            "end": "\\.", 
                            "name": "meta.function.declaration.cfml", 
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)"
                        }, 
                        {
                            "endCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "name": "meta.property.cfml entity.name.function.cfml", 
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ], 
                            "end": "\\s*(=)\\s*", 
                            "name": "meta.function.declaration.cfml", 
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)"
                        }
                    ], 
                    "end": "\\}", 
                    "begin": "(?=(([_$a-zA-Z][$\\w]*)\\s*(\\.)\\s*)+([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\s*\\bfunction\\b|\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{))"
                }, 
                {
                    "patterns": [
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        }, 
                        {
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.accessor.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-cfml-scopes"
                                }, 
                                {
                                    "name": "support.class.cfml", 
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ], 
                            "end": "\\.", 
                            "name": "meta.function.declaration.cfml", 
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)"
                        }, 
                        {
                            "endCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "name": "meta.property.cfml entity.name.function.cfml", 
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ], 
                            "end": "\\s*(=)\\s*", 
                            "name": "meta.function.declaration.cfml", 
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)"
                        }
                    ], 
                    "end": "(?=[);}\\],\\n])", 
                    "begin": "(?=(([_$a-zA-Z][$\\w]*)\\s*(\\.)\\s*)+([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "name": "meta.function.body.cfml", 
                            "begin": "\\{"
                        }, 
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        }, 
                        {
                            "include": "#source-cfml-script-function-declaration"
                        }, 
                        {
                            "endCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "name": "variable.other.constant.cfml entity.name.function.cfml", 
                                    "match": "[A-Z][_$\\dA-Z]*"
                                }, 
                                {
                                    "name": "variable.other.readwrite.cfml entity.name.function.cfml", 
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ], 
                            "end": "\\s*(=)\\s*", 
                            "name": "meta.function.declaration.cfml", 
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)"
                        }
                    ], 
                    "end": "\\}", 
                    "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\s*\\bfunction\\b|\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{))"
                }, 
                {
                    "patterns": [
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        }, 
                        {
                            "endCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "name": "variable.other.constant.cfml entity.name.function.cfml", 
                                    "match": "[A-Z][_$\\dA-Z]*"
                                }, 
                                {
                                    "name": "variable.other.readwrite.cfml entity.name.function.cfml", 
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ], 
                            "end": "\\s*(=)\\s*", 
                            "name": "meta.function.declaration.cfml", 
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)"
                        }
                    ], 
                    "end": "(?=[);}\\],\\n])", 
                    "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "name": "meta.function.body.cfml", 
                            "begin": "\\{"
                        }, 
                        {
                            "include": "#source-cfml-script-function-declaration"
                        }
                    ], 
                    "end": "\\}", 
                    "begin": "(?=\\s*\\bfunction\\b\\s+[_$a-zA-Z][$\\w]*)"
                }
            ]
        }, 
        "source-sql-string_escape": {
            "name": "constant.character.escape.sql", 
            "match": "\\\\."
        }, 
        "text-html-cfml-cfoutput-tag-stuff": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "include": "#text-html-cfml-cfoutput-tag-id-attribute"
                }, 
                {
                    "include": "#text-html-cfml-cfoutput-tag-generic-attribute"
                }, 
                {
                    "include": "#text-html-cfml-cfoutput-string-double-quoted"
                }, 
                {
                    "include": "#text-html-cfml-cfoutput-string-single-quoted"
                }
            ]
        }, 
        "source-cfml-script-struct-literal": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.end.cfml"
                }
            }, 
            "name": "meta.struct-literal.cfml", 
            "begin": "\\{", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "include": "#source-cfml-script-comments"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal-function-keys"
                        }, 
                        {
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-function-declaration"
                                }, 
                                {
                                    "beginCaptures": {
                                        "0": {
                                            "name": "punctuation.definition.block.begin.cfml"
                                        }
                                    }, 
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ], 
                                    "end": "(?=\\})", 
                                    "name": "meta.function.body.cfml", 
                                    "begin": "\\{"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "begin": "(?=\\s*\\bfunction\\b)"
                        }, 
                        {
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                }, 
                                {
                                    "beginCaptures": {
                                        "0": {
                                            "name": "punctuation.definition.block.begin.cfml"
                                        }
                                    }, 
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ], 
                                    "end": "(?=\\})", 
                                    "name": "meta.function.body.cfml", 
                                    "begin": "\\{"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "begin": "(?=\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{)"
                        }
                    ], 
                    "end": "\\}", 
                    "begin": "(?=(\\'[^']*\\'|\\\"[^\"]*\\\"|[_$a-zA-Z][$\\w]*)\\s*(:|=)\\s*(\\bfunction\\b|\\([^\\(]*?\\)\\s*=>\\s*\\{))"
                }, 
                {
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal-function-keys"
                        }, 
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        }
                    ], 
                    "end": "(?=[);}\\],\\n])", 
                    "begin": "(?=(\\'[^']*\\'|\\\"[^\"]*\\\"|[_$a-zA-Z][$\\w]*)\\s*(:|=)\\s*\\([^\\(]*?\\)\\s*=>)"
                }, 
                {
                    "patterns": [
                        {
                            "include": "#source-cfml-script-string"
                        }
                    ], 
                    "end": "(?<=\"|')", 
                    "name": "meta.struct-literal.key.cfml", 
                    "begin": "(?=\"|')"
                }, 
                {
                    "name": "meta.struct-literal.key.cfml", 
                    "match": "[_$a-zA-Z][$\\w]*"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.struct-literal.cfml"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.key-value.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "(,)|(?=\\})", 
                    "begin": "(:|=)\\s*"
                }, 
                {
                    "name": "punctuation.separator.struct-literal.cfml", 
                    "match": ","
                }
            ], 
            "end": "\\}"
        }, 
        "source-cfml-script-method-call": {
            "patterns": [
                {
                    "include": "#source-cfml-script-support-method-call"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.end.cfml"
                        }
                    }, 
                    "name": "meta.function-call.method.cfml", 
                    "begin": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()", 
                    "beginCaptures": {
                        "1": {
                            "name": "variable.function.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-method-call-params"
                        }
                    ], 
                    "end": "\\)"
                }
            ]
        }, 
        "source-cfml-script": {
            "patterns": [
                {
                    "include": "#source-cfml-script-main"
                }
            ]
        }, 
        "source-cfml-script-sql-string": {
            "patterns": [
                {
                    "contentName": "source.sql", 
                    "endCaptures": {
                        "1": {
                            "name": "string.quoted.double.cfml punctuation.definition.string.end.cfml"
                        }
                    }, 
                    "name": "meta.queryexecute.sql.cfml", 
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "string.quoted.double.cfml punctuation.definition.string.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml", 
                            "match": "\"\""
                        }, 
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }, 
                        {
                            "include": "#source-sql"
                        }
                    ], 
                    "end": "(\")(?!\")"
                }, 
                {
                    "contentName": "source.sql", 
                    "endCaptures": {
                        "1": {
                            "name": "string.quoted.single.cfml punctuation.definition.string.end.cfml"
                        }
                    }, 
                    "name": "meta.queryexecute.sql.cfml", 
                    "begin": "'", 
                    "beginCaptures": {
                        "0": {
                            "name": "string.quoted.single.cfml punctuation.definition.string.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml", 
                            "match": "''"
                        }, 
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }, 
                        {
                            "include": "#source-sql"
                        }
                    ], 
                    "end": "(')(?!')"
                }
            ]
        }, 
        "source-cfml-script-function-declaration-parameters": {
            "patterns": [
                {
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-function-parameter"
                        }
                    ], 
                    "end": "(?=\\))", 
                    "name": "meta.function.declaration.cfml meta.function.parameters.cfml", 
                    "begin": "\\("
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "meta.function.parameters.cfml punctuation.definition.parameters.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute"
                        }
                    ], 
                    "end": "(?=(\\{|;|=>))", 
                    "name": "meta.function.declaration.cfml", 
                    "begin": "\\)"
                }
            ]
        }, 
        "source-cfml-script-round-brackets": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.end.cfml"
                        }
                    }, 
                    "name": "meta.group.cfml", 
                    "begin": "\\(", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "\\)"
                }, 
                {
                    "name": "invalid.illegal.stray.brace.round.cfml", 
                    "match": "\\)"
                }
            ]
        }, 
        "source-cfml-script-arrow-function-declaration-parameters": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.cfml"
                }
            }, 
            "name": "meta.function.parameters.cfml", 
            "begin": "\\(", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "include": "#source-cfml-script-function-parameter"
                }
            ], 
            "end": "\\)"
        }, 
        "source-sql-string_interpolation": {
            "captures": {
                "1": {
                    "name": "punctuation.definition.string.end.sql"
                }
            }, 
            "name": "string.interpolated.sql", 
            "match": "(#\\{)([^\\}]*)(\\})"
        }, 
        "source-cfml-script-constructor": {
            "endCaptures": {
                "1": {
                    "name": "meta.function-call.parameters.method.cfml punctuation.definition.group.end.cfml"
                }
            }, 
            "name": "meta.instance.constructor.cfml", 
            "begin": "\\b(new)\\s+", 
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.new.cfml"
                }
            }, 
            "patterns": [
                {
                    "name": "entity.name.class.cfml", 
                    "match": "\\b[_$a-zA-Z][$\\w\\.]*"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "punctuation.separator.function-call.method.cfml", 
                            "match": ","
                        }, 
                        {
                            "beginCaptures": {
                                "1": {
                                    "name": "entity.other.method-parameter.cfml"
                                }, 
                                "2": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ], 
                            "end": "(?=[,\\)])", 
                            "begin": "\\b([_$a-zA-Z][$\\w]*)\\s*(=)(?!=)"
                        }, 
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "(?=\\))", 
                    "name": "meta.function-call.parameters.method.cfml", 
                    "begin": "\\("
                }
            ], 
            "end": "(\\))|(?=[^_$\\w.\\(\\)])"
        }, 
        "source-cfml-script-tag-string-quoted-single": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.cfml"
                }
            }, 
            "name": "string.quoted.single.cfml", 
            "begin": "'", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "name": "constant.character.escape.quote.cfml", 
                    "match": "''"
                }, 
                {
                    "include": "#source-cfml-script-hash-delimiters"
                }
            ], 
            "end": "'(?!')"
        }, 
        "source-cfml-script-anonymous-function": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "name": "meta.function.body.cfml", 
                            "begin": "\\{"
                        }, 
                        {
                            "captures": {
                                "0": {
                                    "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                                }, 
                                "1": {
                                    "name": "storage.type.function.cfml"
                                }
                            }, 
                            "match": "\\b(function)\\b\\s*"
                        }, 
                        {
                            "captures": {
                                "0": {
                                    "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                                }, 
                                "1": {
                                    "name": "storage.type.function.arrow.cfml"
                                }
                            }, 
                            "match": "\\s*(=>)\\s*"
                        }, 
                        {
                            "name": "meta.function.anonymous.cfml meta.function.declaration.cfml entity.name.function.cfml", 
                            "match": "[_$a-zA-Z][$\\w]*"
                        }, 
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.parameters.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-function-parameter"
                                }
                            ], 
                            "end": "(?=\\))", 
                            "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml", 
                            "begin": "\\("
                        }, 
                        {
                            "beginCaptures": {
                                "0": {
                                    "name": "meta.function.parameters.cfml punctuation.definition.parameters.end.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-tag-generic-attribute"
                                }
                            ], 
                            "end": "(?=(\\{|=>))", 
                            "name": "meta.function.anonymous.cfml meta.function.declaration.cfml", 
                            "begin": "\\)"
                        }
                    ], 
                    "end": "\\}", 
                    "begin": "(?=(\\s*\\bfunction\\b|\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{))"
                }, 
                {
                    "patterns": [
                        {
                            "contentName": "meta.function.body.cfml", 
                            "beginCaptures": {
                                "0": {
                                    "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                                }, 
                                "1": {
                                    "name": "storage.type.function.arrow.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ], 
                            "end": "(?=[);}\\],\\n])", 
                            "begin": "\\s*(=>)\\s*"
                        }, 
                        {
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.parameters.end.cfml"
                                }
                            }, 
                            "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml", 
                            "begin": "\\(", 
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.parameters.begin.cfml"
                                }
                            }, 
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-function-parameter"
                                }
                            ], 
                            "end": "\\)"
                        }
                    ], 
                    "end": "(?=[);}\\],\\n])", 
                    "begin": "(?=\\s*\\([^\\(]*?\\)\\s*=>)"
                }
            ]
        }, 
        "source-css-string-double": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.css"
                }
            }, 
            "name": "string.quoted.double.css", 
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.css"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "name": "constant.character.escape.css", 
                    "match": "\\\\."
                }
            ], 
            "end": "\""
        }, 
        "source-js-cfoutput": {
            "patterns": [
                {
                    "comment": "node.js shebang", 
                    "name": "comment.line.js", 
                    "match": "^#!/usr/bin/env node"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "support.class.js"
                        }, 
                        "2": {
                            "name": "support.constant.js"
                        }, 
                        "3": {
                            "name": "keyword.operator.js"
                        }
                    }, 
                    "comment": "match stuff like: Sound.prototype = { \u2026 } when extending an object", 
                    "name": "meta.class.js", 
                    "match": "([a-zA-Z_?.$][\\w?.$]*)\\.(prototype)\\s*(=)\\s*"
                }, 
                {
                    "captures": {
                        "8": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "4": {
                            "name": "keyword.operator.js"
                        }, 
                        "5": {
                            "name": "storage.type.function.js"
                        }, 
                        "6": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }, 
                        "7": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "1": {
                            "name": "support.class.js"
                        }, 
                        "2": {
                            "name": "support.constant.js"
                        }, 
                        "3": {
                            "name": "entity.name.function.js"
                        }
                    }, 
                    "comment": "match stuff like: Sound.prototype.play = function() { \u2026 }", 
                    "name": "meta.function.prototype.js", 
                    "match": "([a-zA-Z_?.$][\\w?.$]*)\\.(prototype)\\.([a-zA-Z_?.$][\\w?.$]*)\\s*(=)\\s*(function)?\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "keyword.operator.js"
                        }, 
                        "1": {
                            "name": "support.class.js"
                        }, 
                        "2": {
                            "name": "support.constant.js"
                        }, 
                        "3": {
                            "name": "entity.name.function.js"
                        }
                    }, 
                    "comment": "match stuff like: Sound.prototype.play = myfunc", 
                    "name": "meta.function.js", 
                    "match": "([a-zA-Z_?.$][\\w?.$]*)\\.(prototype)\\.([a-zA-Z_?.$][\\w?.$]*)\\s*(=)\\s*"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "storage.type.function.js"
                        }, 
                        "5": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }, 
                        "6": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "7": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "support.class.js"
                        }, 
                        "2": {
                            "name": "entity.name.function.js"
                        }, 
                        "3": {
                            "name": "keyword.operator.js"
                        }
                    }, 
                    "comment": "match stuff like: Sound.play = function() { \u2026 }", 
                    "name": "meta.function.js", 
                    "match": "([a-zA-Z_?.$][\\w?.$]*)\\.([a-zA-Z_?.$][\\w?.$]*)\\s*(=)\\s*(function)\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }, 
                        "5": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "6": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "entity.name.function.js"
                        }, 
                        "2": {
                            "name": "keyword.operator.js"
                        }, 
                        "3": {
                            "name": "storage.type.function.js"
                        }
                    }, 
                    "comment": "match stuff like: play = function() { \u2026 }", 
                    "name": "meta.function.js", 
                    "match": "([a-zA-Z_?$][\\w?$]*)\\s*(=)\\s*(function)\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "5": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "storage.type.function.js"
                        }, 
                        "2": {
                            "name": "entity.name.function.js"
                        }, 
                        "3": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }
                    }, 
                    "comment": "match regular function like: function myFunc(arg) { \u2026 }", 
                    "name": "meta.function.js", 
                    "match": "\\b(function)\\s+([a-zA-Z_$]\\w*)?\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "5": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "entity.name.function.js"
                        }, 
                        "2": {
                            "name": "storage.type.function.js"
                        }, 
                        "3": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }
                    }, 
                    "comment": "match stuff like: foobar: function() { \u2026 }", 
                    "name": "meta.function.json.js", 
                    "match": "\\b([a-zA-Z_?.$][\\w?.$]*)\\s*:\\s*\\b(function)?\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "8": {
                            "name": "punctuation.definition.string.end.js"
                        }, 
                        "9": {
                            "name": "entity.name.function.js"
                        }, 
                        "4": {
                            "name": "punctuation.definition.string.end.js"
                        }, 
                        "5": {
                            "name": "string.quoted.double.js"
                        }, 
                        "6": {
                            "name": "punctuation.definition.string.begin.js"
                        }, 
                        "7": {
                            "name": "entity.name.function.js"
                        }, 
                        "12": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "string.quoted.single.js"
                        }, 
                        "10": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }, 
                        "3": {
                            "name": "entity.name.function.js"
                        }, 
                        "2": {
                            "name": "punctuation.definition.string.begin.js"
                        }, 
                        "11": {
                            "name": "variable.parameter.function.js"
                        }
                    }, 
                    "comment": "Attempt to match \"foo\": function", 
                    "name": "meta.function.json.js", 
                    "match": "(?:((')([^']*)('))|((\")([^\"]*)(\")))\\s*:\\s*\\b(function)?\\s*(\\()([^)]*)(\\))"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.operator.new.js"
                        }, 
                        "2": {
                            "name": "entity.name.type.instance.js"
                        }
                    }, 
                    "name": "meta.class.instance.constructor", 
                    "match": "(new)\\s+(\\w+(?:\\.\\w*)?)"
                }, 
                {
                    "name": "entity.name.type.object.js.firebug", 
                    "match": "\\b(console)\\b"
                }, 
                {
                    "name": "support.function.js.firebug", 
                    "match": "\\.(warn|info|log|error|time|timeEnd|assert)\\b"
                }, 
                {
                    "name": "constant.numeric.js", 
                    "match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.js"
                        }
                    }, 
                    "name": "string.quoted.single.js", 
                    "begin": "'", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.js"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "name": "constant.character.escape.js", 
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
                        }
                    ], 
                    "end": "'"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.js"
                        }
                    }, 
                    "name": "string.quoted.double.js", 
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.js"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "name": "constant.character.escape.js", 
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
                        }
                    ], 
                    "end": "\""
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.js"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.documentation.js", 
                    "begin": "/\\*\\*(?!/)"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.js"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.js", 
                    "begin": "/\\*"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.js"
                        }
                    }, 
                    "name": "comment.line.double-slash.js", 
                    "match": "(//).*$\\n?"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.html.js"
                        }, 
                        "2": {
                            "name": "punctuation.definition.comment.html.js"
                        }
                    }, 
                    "name": "comment.block.html.js", 
                    "match": "(<!--|-->)"
                }, 
                {
                    "name": "storage.type.js", 
                    "match": "\\b(boolean|byte|char|class|double|enum|float|function|int|interface|long|short|var|void)\\b"
                }, 
                {
                    "name": "storage.modifier.js", 
                    "match": "\\b(const|export|extends|final|implements|native|private|protected|public|static|synchronized|throws|transient|volatile)\\b"
                }, 
                {
                    "name": "keyword.control.js", 
                    "match": "\\b(break|case|catch|continue|default|do|else|finally|for|goto|if|import|package|return|switch|throw|try|while)\\b"
                }, 
                {
                    "name": "keyword.operator.js", 
                    "match": "\\b(delete|in|instanceof|new|typeof|with)\\b"
                }, 
                {
                    "name": "constant.language.boolean.true.js", 
                    "match": "\\btrue\\b"
                }, 
                {
                    "name": "constant.language.boolean.false.js", 
                    "match": "\\bfalse\\b"
                }, 
                {
                    "name": "constant.language.null.js", 
                    "match": "\\bnull\\b"
                }, 
                {
                    "name": "variable.language.js", 
                    "match": "\\b(super|this)\\b"
                }, 
                {
                    "name": "keyword.other.js", 
                    "match": "\\b(debugger)\\b"
                }, 
                {
                    "name": "support.class.js", 
                    "match": "\\b(Anchor|Applet|Area|Array|Boolean|Button|Checkbox|Date|document|event|FileUpload|Form|Frame|Function|Hidden|History|Image|JavaArray|JavaClass|JavaObject|JavaPackage|java|Layer|Link|Location|Math|MimeType|Number|navigator|netscape|Object|Option|Packages|Password|Plugin|Radio|RegExp|Reset|Select|String|Style|Submit|screen|sun|Text|Textarea|window|XMLHttpRequest)\\b"
                }, 
                {
                    "name": "support.function.js", 
                    "match": "\\b(s(h(ift|ow(Mod(elessDialog|alDialog)|Help))|croll(X|By(Pages|Lines)?|Y|To)?|t(op|rike)|i(n|zeToContent|debar|gnText)|ort|u(p|b(str(ing)?)?)|pli(ce|t)|e(nd|t(Re(sizable|questHeader)|M(i(nutes|lliseconds)|onth)|Seconds|Ho(tKeys|urs)|Year|Cursor|Time(out)?|Interval|ZOptions|Date|UTC(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Date|FullYear)|FullYear|Active)|arch)|qrt|lice|avePreferences|mall)|h(ome|andleEvent)|navigate|c(har(CodeAt|At)|o(s|n(cat|textual|firm)|mpile)|eil|lear(Timeout|Interval)?|a(ptureEvents|ll)|reate(StyleSheet|Popup|EventObject))|t(o(GMTString|S(tring|ource)|U(TCString|pperCase)|Lo(caleString|werCase))|est|a(n|int(Enabled)?))|i(s(NaN|Finite)|ndexOf|talics)|d(isableExternalCapture|ump|etachEvent)|u(n(shift|taint|escape|watch)|pdateCommands)|j(oin|avaEnabled)|p(o(p|w)|ush|lugins.refresh|a(ddings|rse(Int|Float)?)|r(int|ompt|eference))|e(scape|nableExternalCapture|val|lementFromPoint|x(p|ec(Script|Command)?))|valueOf|UTC|queryCommand(State|Indeterm|Enabled|Value)|f(i(nd|le(ModifiedDate|Size|CreatedDate|UpdatedDate)|xed)|o(nt(size|color)|rward)|loor|romCharCode)|watch|l(ink|o(ad|g)|astIndexOf)|a(sin|nchor|cos|t(tachEvent|ob|an(2)?)|pply|lert|b(s|ort))|r(ou(nd|teEvents)|e(size(By|To)|calc|turnValue|place|verse|l(oad|ease(Capture|Events)))|andom)|g(o|et(ResponseHeader|M(i(nutes|lliseconds)|onth)|Se(conds|lection)|Hours|Year|Time(zoneOffset)?|Da(y|te)|UTC(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Da(y|te)|FullYear)|FullYear|A(ttention|llResponseHeaders)))|m(in|ove(B(y|elow)|To(Absolute)?|Above)|ergeAttributes|a(tch|rgins|x))|b(toa|ig|o(ld|rderWidths)|link|ack))\\b(?=\\()"
                }, 
                {
                    "name": "support.function.dom.js", 
                    "match": "\\b(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)\\b(?=\\()"
                }, 
                {
                    "name": "support.constant.js", 
                    "match": "(?<=\\.)(s(ystemLanguage|cr(ipts|ollbars|een(X|Y|Top|Left))|t(yle(Sheets)?|atus(Text|bar)?)|ibling(Below|Above)|ource|uffixes|e(curity(Policy)?|l(ection|f)))|h(istory|ost(name)?|as(h|Focus))|y|X(MLDocument|SLDocument)|n(ext|ame(space(s|URI)|Prop))|M(IN_VALUE|AX_VALUE)|c(haracterSet|o(n(structor|trollers)|okieEnabled|lorDepth|mp(onents|lete))|urrent|puClass|l(i(p(boardData)?|entInformation)|osed|asses)|alle(e|r)|rypto)|t(o(olbar|p)|ext(Transform|Indent|Decoration|Align)|ags)|SQRT(1_2|2)|i(n(ner(Height|Width)|put)|ds|gnoreCase)|zIndex|o(scpu|n(readystatechange|Line)|uter(Height|Width)|p(sProfile|ener)|ffscreenBuffering)|NEGATIVE_INFINITY|d(i(splay|alog(Height|Top|Width|Left|Arguments)|rectories)|e(scription|fault(Status|Ch(ecked|arset)|View)))|u(ser(Profile|Language|Agent)|n(iqueID|defined)|pdateInterval)|_content|p(ixelDepth|ort|ersonalbar|kcs11|l(ugins|atform)|a(thname|dding(Right|Bottom|Top|Left)|rent(Window|Layer)?|ge(X(Offset)?|Y(Offset)?))|r(o(to(col|type)|duct(Sub)?|mpter)|e(vious|fix)))|e(n(coding|abledPlugin)|x(ternal|pando)|mbeds)|v(isibility|endor(Sub)?|Linkcolor)|URLUnencoded|P(I|OSITIVE_INFINITY)|f(ilename|o(nt(Size|Family|Weight)|rmName)|rame(s|Element)|gColor)|E|whiteSpace|l(i(stStyleType|n(eHeight|kColor))|o(ca(tion(bar)?|lName)|wsrc)|e(ngth|ft(Context)?)|a(st(M(odified|atch)|Index|Paren)|yer(s|X)|nguage))|a(pp(MinorVersion|Name|Co(deName|re)|Version)|vail(Height|Top|Width|Left)|ll|r(ity|guments)|Linkcolor|bove)|r(ight(Context)?|e(sponse(XML|Text)|adyState))|global|x|m(imeTypes|ultiline|enubar|argin(Right|Bottom|Top|Left))|L(N(10|2)|OG(10E|2E))|b(o(ttom|rder(Width|RightWidth|BottomWidth|Style|Color|TopWidth|LeftWidth))|ufferDepth|elow|ackground(Color|Image)))\\b"
                }, 
                {
                    "name": "support.constant.dom.js", 
                    "match": "(?<=\\.)(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))\\b"
                }, 
                {
                    "name": "support.constant.dom.js", 
                    "match": "\\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\\b"
                }, 
                {
                    "name": "support.function.event-handler.js", 
                    "match": "\\bon(R(ow(s(inserted|delete)|e(nter|xit))|e(s(ize(start|end)?|et)|adystatechange))|Mouse(o(ut|ver)|down|up|move)|B(efore(cut|deactivate|u(nload|pdate)|p(aste|rint)|editfocus|activate)|lur)|S(croll|top|ubmit|elect(start|ionchange)?)|H(over|elp)|C(hange|ont(extmenu|rolselect)|ut|ellchange|l(ick|ose))|D(eactivate|ata(setc(hanged|omplete)|available)|r(op|ag(start|over|drop|en(ter|d)|leave)?)|blclick)|Unload|P(aste|ropertychange)|Error(update)?|Key(down|up|press)|Focus|Load|A(ctivate|fter(update|print)|bort))\\b"
                }, 
                {
                    "name": "keyword.operator.js", 
                    "match": "!|\\$|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\\^=|\\b(in|instanceof|new|delete|typeof|void)\\b"
                }, 
                {
                    "name": "constant.language.js", 
                    "match": "\\b(Infinity|NaN|undefined)\\b"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.js"
                        }
                    }, 
                    "name": "string.regexp.js", 
                    "begin": "(?<=[=(:]|^|return|&&|\\|\\||!)\\s*(/)(?![/*+{}?])", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.js"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "name": "constant.character.escape.js", 
                            "match": "\\\\."
                        }
                    ], 
                    "end": "(/)[igm]*"
                }, 
                {
                    "name": "punctuation.terminator.statement.js", 
                    "match": "\\;"
                }, 
                {
                    "name": "meta.delimiter.object.comma.js", 
                    "match": ",[ |\\t]*"
                }, 
                {
                    "name": "meta.delimiter.method.period.js", 
                    "match": "\\."
                }, 
                {
                    "name": "meta.brace.curly.js", 
                    "match": "\\{|\\}"
                }, 
                {
                    "name": "meta.brace.round.js", 
                    "match": "\\(|\\)"
                }, 
                {
                    "name": "meta.brace.square.js", 
                    "match": "\\[|\\]"
                }
            ]
        }, 
        "source-cfml-script-support-call-parameter": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "entity.other.function-parameter.cfml"
                        }, 
                        "2": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "(?=[,\\)])", 
                    "begin": "\\b([_$a-zA-Z][$\\w\\.]*)\\s*(=)(?!=)"
                }
            ]
        }, 
        "cfoutput-injection": {
            "patterns": [
                {
                    "name": "constant.character.escape.hash.cfml", 
                    "match": "##"
                }, 
                {
                    "contentName": "source.cfml.script", 
                    "endCaptures": {
                        "0": {
                            "name": "constant.character.hash.cfml.end"
                        }
                    }, 
                    "begin": "#", 
                    "beginCaptures": {
                        "0": {
                            "name": "constant.character.hash.cfml.start"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script"
                        }
                    ], 
                    "end": "#"
                }, 
                {
                    "include": "#cfml-tags"
                }
            ]
        }, 
        "source-cfml-script-square-brackets": {
            "patterns": [
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.brackets.end.cfml"
                        }
                    }, 
                    "name": "meta.brackets.cfml", 
                    "begin": "(?<=[$\\w\\)\\]])\\s*(\\[)", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.brackets.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "\\]"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.brackets.end.cfml"
                        }
                    }, 
                    "name": "meta.array-literal.cfml", 
                    "begin": "\\[", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.brackets.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "punctuation.separator.array-literal.cfml", 
                            "match": ","
                        }, 
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "\\]"
                }
            ]
        }, 
        "source-sql-strings": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.sql"
                        }
                    }, 
                    "name": "string.quoted.single.sql", 
                    "begin": "'", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.sql"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-sql-string_escape"
                        }
                    ], 
                    "end": "'"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.sql"
                        }
                    }, 
                    "name": "string.quoted.other.backtick.sql", 
                    "begin": "`", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.sql"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-sql-string_escape"
                        }
                    ], 
                    "end": "`"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.sql"
                        }
                    }, 
                    "name": "string.quoted.double.sql", 
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.sql"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-sql-string_interpolation"
                        }
                    ], 
                    "end": "\""
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.sql"
                        }
                    }, 
                    "name": "string.other.quoted.brackets.sql", 
                    "begin": "%\\{", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.sql"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-sql-string_interpolation"
                        }
                    ], 
                    "end": "\\}"
                }
            ]
        }, 
        "source-cfml-script-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.logical.cfml", 
                    "match": "!(?!=)"
                }, 
                {
                    "name": "keyword.operator.logical.cfml", 
                    "match": "\\b(?i:not)\\b"
                }, 
                {
                    "name": "keyword.operator.arithmetic.cfml", 
                    "match": "--|\\+\\+"
                }, 
                {
                    "name": "keyword.operator.new.cfml", 
                    "match": "\\bnew\\b"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "\\bin\\b"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.logical.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "&&|\\|\\|"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.logical.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "\\b(?i:(and|or|xor|eqv|imp))\\b"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "=(?!=)"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.decision.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "\\b(?i:(greater|less|than|equal\\s+to|does|contains|equal|eq|neq|lt|lte|le|gt|gte|ge|and|is))\\b"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.assignment.augmented.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "%=|&=|\\*=|\\+=|-=|/="
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.concat.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "&"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.relational.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "<=|>=|<|>"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.comparison.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "==|!="
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.arithmetic.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "/|%|\\*|\\+|-"
                }, 
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.ternary.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ], 
                    "end": "(?<=\\})|(?=[^\\s\\{])", 
                    "begin": "\\?|:(?!:)"
                }
            ]
        }, 
        "source-cfml-script-tag-in-script": {
            "patterns": [
                {
                    "beginCaptures": {
                        "4": {
                            "name": "string.unquoted.cfml meta.tag.property.name.cfml"
                        }, 
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }, 
                        "3": {
                            "name": "storage.type.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute"
                        }
                    ], 
                    "end": "(?=(;|{))", 
                    "name": "meta.tag.script.cfml meta.tag.property.cfml", 
                    "begin": "(?i)\\b(property)(?!\\s+in\\b)(\\s+(any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid|[_$a-zA-Z][$\\w]*))?\\s+([_$a-zA-Z][$\\w]*\\b)(?!\\s*=)"
                }, 
                {
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "captures": {
                                "9": {
                                    "name": "meta.tag.property.name.cfml"
                                }, 
                                "7": {
                                    "name": "string.quoted.single.cfml"
                                }, 
                                "8": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                }, 
                                "10": {
                                    "name": "punctuation.definition.string.end.cfml"
                                }, 
                                "4": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                }, 
                                "5": {
                                    "name": "meta.tag.property.name.cfml"
                                }, 
                                "6": {
                                    "name": "punctuation.definition.string.end.cfml"
                                }, 
                                "11": {
                                    "name": "string.unquoted.cfml meta.tag.property.name.cfml"
                                }, 
                                "1": {
                                    "name": "entity.other.attribute-name.cfml"
                                }, 
                                "2": {
                                    "name": "punctuation.separator.key-value.cfml"
                                }, 
                                "3": {
                                    "name": "string.quoted.double.cfml"
                                }
                            }, 
                            "match": "(?i)\\b(name)\\s*(=)\\s*(?:((\")([^<>\"']*)(\"))|((')([^<>\"']*)('))|([^<>\"'\\s]*))"
                        }, 
                        {
                            "include": "#source-cfml-script-tag-generic-attribute"
                        }
                    ], 
                    "end": "(?=(;|{))", 
                    "name": "meta.tag.script.cfml meta.tag.property.cfml", 
                    "begin": "(?i)\\b(property)(?!\\s+in\\b)(?=(\\s+[a-zA-Z]|\\s*$|\\s*[{;]))"
                }, 
                {
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }
                    ], 
                    "end": "(?=[;{])", 
                    "name": "meta.tag.script.cfml", 
                    "begin": "(?i)\\b(param)(?!\\s+in\\b)(?=\\s+(name|default|max|maxLength|min|pattern|type)\\s*=)"
                }, 
                {
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }, 
                        "2": {
                            "name": "string.unquoted.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }
                    ], 
                    "end": "(?=[;{])", 
                    "name": "meta.tag.script.cfml", 
                    "begin": "(?i)\\b(param)(?!\\s+in\\b)\\s+([_$a-zA-Z][$\\w\\.]*)(?=\\s+(name|default|max|maxLength|min|pattern|type))"
                }, 
                {
                    "beginCaptures": {
                        "4": {
                            "name": "string.unquoted.cfml"
                        }, 
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }, 
                        "3": {
                            "name": "storage.type.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }
                    ], 
                    "end": "(?=[;{])", 
                    "name": "meta.tag.script.cfml", 
                    "begin": "(?i)\\b(param)(?!\\s+in\\b)(\\s+([_$a-zA-Z][$\\w]*))?\\s+([_$a-zA-Z][$\\w\\.]*\\b)"
                }, 
                {
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }
                    ], 
                    "end": "(?=[;{])", 
                    "name": "meta.tag.script.cfml", 
                    "begin": "(?i)\\b(param)(?!\\s+in\\b)(?=(\\s+[a-zA-Z]|\\s*[{;]|\\s*$))"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    }, 
                    "beginCaptures": {
                        "2": {
                            "name": "meta.tag.script.cfml entity.name.tag.script.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "meta.tag.script.cfml", 
                            "match": "\\s+"
                        }, 
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }, 
                        {
                            "include": "#source-cfml-script-block-scope"
                        }
                    ], 
                    "end": "(\\})|(?=;)", 
                    "begin": "(?x)(\\b)\n(?i:\n  (ajaximport|ajaxproxy|applet|application|argument|associate|break|cache|calendar\n  |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo\n  |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar\n  |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask\n  |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn\n  |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image\n  |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout\n  |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart\n  |map|mapitem|mediaplayer|menu|menuitem|messagebox|module|ntauthenticate|oauth|object\n  |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop\n  |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult\n  |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule\n  |search|select|setting|sharepoint|silent|slider|spreadsheet|sprydataset|storedproc\n  |table|textarea|textinput|thread|throw|timer|tooltip|trace|transaction|tree|treeitem|try\n  |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)\n)(?=\\s+[a-zA-Z0-9:-]+\\s*([=;{]|$)|\\s*({|$))"
                }
            ]
        }, 
        "cfcomponent": {
            "endCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                }, 
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                }, 
                "2": {
                    "name": "entity.name.tag.cfml storage.type.class.cfml"
                }, 
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            }, 
            "patterns": [
                {
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.cfml storage.type.class.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#extends"
                        }, 
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": "(?=>)", 
                    "name": "meta.tag.cfml meta.class.cfml", 
                    "begin": "(?i)(<)(cfcomponent)"
                }, 
                {
                    "contentName": "meta.class.body.tag.cfml", 
                    "beginCaptures": {
                        "0": {
                            "name": "meta.tag.cfml meta.class.cfml punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }
                    ], 
                    "end": "(?i)(?=</cfcomponent>)", 
                    "begin": ">"
                }
            ], 
            "end": "(?i)(</)(cfcomponent)(>)", 
            "begin": "(?i)(?=<cfcomponent)"
        }, 
        "source-cfml-script-punctuation": {
            "patterns": [
                {
                    "endCaptures": {
                        "4": {
                            "name": "meta.property.cfml"
                        }, 
                        "1": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }, 
                        "2": {
                            "name": "punctuation.terminator.statement.cfml"
                        }, 
                        "3": {
                            "name": "meta.property.constant.cfml"
                        }
                    }, 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.accessor.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "patterns": [
                                {
                                    "beginCaptures": {
                                        "0": {
                                            "name": "punctuation.definition.block.begin.cfml"
                                        }
                                    }, 
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ], 
                                    "end": "(?=\\})", 
                                    "name": "meta.function.body.cfml", 
                                    "begin": "\\{"
                                }, 
                                {
                                    "captures": {
                                        "0": {
                                            "name": "meta.function.declaration.cfml"
                                        }, 
                                        "1": {
                                            "name": "meta.property.cfml entity.name.function.cfml"
                                        }, 
                                        "2": {
                                            "name": "keyword.operator.assignment.cfml"
                                        }
                                    }, 
                                    "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*"
                                }, 
                                {
                                    "include": "#source-cfml-script-function-declaration"
                                }, 
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(function\\b|\\([^\\(]*?\\)\\s*=>\\s*\\{))"
                        }, 
                        {
                            "patterns": [
                                {
                                    "captures": {
                                        "0": {
                                            "name": "meta.function.declaration.cfml"
                                        }, 
                                        "1": {
                                            "name": "meta.property.cfml entity.name.function.cfml"
                                        }, 
                                        "2": {
                                            "name": "keyword.operator.assignment.cfml"
                                        }
                                    }, 
                                    "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*"
                                }, 
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                }
                            ], 
                            "end": "(?=[);}\\],\\n])", 
                            "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)"
                        }, 
                        {
                            "include": "#source-cfml-script-method-call"
                        }
                    ], 
                    "end": "(?<=\\))|(?=\\n)|(\\})|(;)|(?:([A-Z][_$\\dA-Z]*)|([_$a-zA-Z][$\\w]*))(?=\\n|[^$\\w])(?!(\\s*\\(|\\s*=\\s*(function\\b|\\([^\\(]*?\\)\\s*=>)))", 
                    "begin": "\\."
                }, 
                {
                    "endCaptures": {
                        "4": {
                            "name": "meta.property.cfml"
                        }, 
                        "1": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }, 
                        "2": {
                            "name": "punctuation.terminator.statement.cfml"
                        }, 
                        "3": {
                            "name": "meta.property.constant.cfml"
                        }
                    }, 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.accessor.static.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "patterns": [
                                {
                                    "beginCaptures": {
                                        "0": {
                                            "name": "punctuation.definition.block.begin.cfml"
                                        }
                                    }, 
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ], 
                                    "end": "(?=\\})", 
                                    "name": "meta.function.body.cfml", 
                                    "begin": "\\{"
                                }, 
                                {
                                    "captures": {
                                        "0": {
                                            "name": "meta.function.declaration.cfml"
                                        }, 
                                        "1": {
                                            "name": "meta.property.cfml entity.name.function.cfml"
                                        }, 
                                        "2": {
                                            "name": "keyword.operator.assignment.cfml"
                                        }
                                    }, 
                                    "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*"
                                }, 
                                {
                                    "include": "#source-cfml-script-function-declaration"
                                }, 
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                }
                            ], 
                            "end": "(?=\\})", 
                            "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(function\\b|\\([^\\(]*?\\)\\s*=>\\s*\\{))"
                        }, 
                        {
                            "patterns": [
                                {
                                    "captures": {
                                        "0": {
                                            "name": "meta.function.declaration.cfml"
                                        }, 
                                        "1": {
                                            "name": "meta.property.cfml entity.name.function.cfml"
                                        }, 
                                        "2": {
                                            "name": "keyword.operator.assignment.cfml"
                                        }
                                    }, 
                                    "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*"
                                }, 
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                }
                            ], 
                            "end": "(?=[);}\\],\\n])", 
                            "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)"
                        }, 
                        {
                            "include": "#source-cfml-script-static-method-call"
                        }
                    ], 
                    "end": "(?<=\\))|(?=\\n)|(\\})|(;)|(?:([A-Z][_$\\dA-Z]*)|([_$a-zA-Z][$\\w]*))(?=\\n|[^$\\w])(?!(\\s*\\(|\\s*=\\s*(function\\b|\\([^\\(]*?\\)\\s*=>)))", 
                    "begin": "::"
                }, 
                {
                    "name": "punctuation.terminator.statement.cfml", 
                    "match": "\\;"
                }, 
                {
                    "name": "meta.delimiter.comma.cfml", 
                    "match": ","
                }
            ]
        }, 
        "source-cfml-script-string-quoted-double": {
            "endCaptures": {
                "1": {
                    "name": "string.quoted.double.cfml punctuation.definition.string.end.cfml"
                }
            }, 
            "beginCaptures": {
                "0": {
                    "name": "string.quoted.double.cfml punctuation.definition.string.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "name": "string.quoted.double.cfml constant.character.escape.quote.cfml", 
                    "match": "\"\""
                }, 
                {
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml", 
                            "match": "\"\""
                        }, 
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }, 
                        {
                            "include": "#source-sql"
                        }
                    ], 
                    "end": "(?=\"[^\"])", 
                    "name": "meta.string.quoted.double.cfml source.sql", 
                    "begin": "(?=\\s*(?:SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|WITH|DECLARE|FROM|WHERE|AND|ORDER BY|GROUP BY|INNER JOIN|OUTER JOIN|LEFT JOIN)\\b)"
                }, 
                {
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml", 
                            "match": "\"\""
                        }, 
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }
                    ], 
                    "end": "(?=\"[^\"])", 
                    "name": "string.quoted.double.cfml", 
                    "begin": "(?=\\S)"
                }, 
                {
                    "name": "string.quoted.double.cfml", 
                    "match": "[\\s\\n]"
                }
            ], 
            "end": "(\")(?!\")", 
            "begin": "\""
        }, 
        "source-cfml-script-support-call": {
            "patterns": [
                {
                    "contentName": "meta.function-call.parameters.support.cfml", 
                    "endCaptures": {
                        "0": {
                            "name": "meta.function-call.parameters.support.cfml punctuation.definition.group.end.cfml"
                        }
                    }, 
                    "name": "meta.function-call.support.cfml meta.function-call.support.createcomponent.cfml", 
                    "begin": "(?i)\\b(createobject)(\\()(?=(?:\\s*type\\s*=)?\\s*[\"']component[\"']\\s*,)", 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.cfml"
                        }, 
                        "2": {
                            "name": "meta.function-call.parameters.support.cfml punctuation.definition.group.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "punctuation.separator.function-call.support.cfml", 
                            "match": ","
                        }, 
                        {
                            "include": "#source-cfml-script-support-call-parameter"
                        }, 
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "\\)"
                }, 
                {
                    "contentName": "meta.function-call.parameters.support.cfml", 
                    "endCaptures": {
                        "0": {
                            "name": "meta.function-call.parameters.support.cfml punctuation.definition.group.end.cfml"
                        }
                    }, 
                    "name": "meta.function-call.support.cfml meta.function-call.support.createjavaobject.cfml", 
                    "begin": "(?i)\\b(createobject)(\\()(?=(?:\\s*type\\s*=)?\\s*[\"']java[\"']\\s*,)", 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.cfml"
                        }, 
                        "2": {
                            "name": "meta.function-call.parameters.support.cfml punctuation.definition.group.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "punctuation.separator.function-call.support.cfml", 
                            "match": ","
                        }, 
                        {
                            "include": "#source-cfml-script-support-call-parameter"
                        }, 
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "\\)"
                }, 
                {
                    "contentName": "meta.function-call.parameters.support.cfml", 
                    "endCaptures": {
                        "0": {
                            "name": "meta.function-call.parameters.support.cfml punctuation.definition.group.end.cfml"
                        }
                    }, 
                    "name": "meta.function-call.support.cfml", 
                    "begin": "(?i)\\b(queryexecute)(\\()", 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.cfml"
                        }, 
                        "2": {
                            "name": "meta.function-call.parameters.support.cfml punctuation.definition.group.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-sql-string"
                                }, 
                                {
                                    "include": "#source-cfml-script-queryexecute-parameter"
                                }, 
                                {
                                    "include": "#source-cfml-script-support-call-parameter"
                                }, 
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ], 
                            "end": "(?=[,)])", 
                            "begin": "(?i)(?<=queryexecute\\()"
                        }, 
                        {
                            "name": "punctuation.separator.function-call.support.cfml", 
                            "match": ","
                        }, 
                        {
                            "include": "#source-cfml-script-queryexecute-parameter"
                        }, 
                        {
                            "include": "#source-cfml-script-support-call-parameter"
                        }, 
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "\\)"
                }, 
                {
                    "contentName": "meta.function-call.parameters.support.cfml", 
                    "endCaptures": {
                        "0": {
                            "name": "meta.function-call.parameters.support.cfml punctuation.definition.group.end.cfml"
                        }
                    }, 
                    "name": "meta.function-call.support.cfml", 
                    "begin": "(?x)\\b\n(?i:\n    (array(?:append|avg|clear|contains|containsnocase|delete|deleteat|deletenocase|each\n    |every|filter|find|findall|findallnocase|findnocase|first|indexexists|insertat|isdefined\n    |isempty|last|len|map|max|median|merge|mid|min|new|prepend|reduce|resize|reverse\n    |set|slice|some|sort|sum|swap|tolist|tostruct)|cache(?:clear|count|delete|get|getall\n    |getallids|getdefaultcachename|getmetadata|getproperties|getsession|idexists|keyexists\n    |put|regionexists|regionnew|regionremove|remove|removeall|setproperties)|component(?:cacheclear\n    |cachelist|info)|create(?:date|datetime|dynamicproxy|guid|object|odbcdate|odbcdatetime\n    |odbctime|time|timespan|uniqueid|uuid)|date(?:add|compare|convert|diff|format|part\n    |timeformat)|entity(?:delete|load|loadbyexample|loadbypk|merge|namearray|namelist\n    |new|reload|save|toquery)|get(?:applicationmetadata|applicationsettings|authuser\n    |basetagdata|basetaglist|basetemplatepath|builtinfunction|canonicalpath|classpath\n    |clientvariableslist|componentmetadata|contextroot|cpuusage|currentcontext|currenttemplatepath\n    |directoryfrompath|encoding|exception|filefrompath|fileinfo|freespace|functioncalledname\n    |functiondata|functionkeywords|functionlist|gatewayhelper|httprequestdata|httptimestring\n    |k2serverdoccount|k2serverdoccountlimit|locale|localedisplayname|localhostip|luceeid\n    |memoryusage|metadata|metricdata|numericdate|pagecontext|printerinfo|printerlist\n    |profilesections|profilestring|readableimageformats|safehtml|soaprequest|soaprequestheader\n    |soapresponse|soapresponseheader|systemfreememory|systemtotalmemory|tagdata|taglist\n    |tempdirectory|tempfile|templatepath|tickcount|timezone|timezoneinfo|token|totalspace\n    |userroles|variable|vfsmetadata|writeableimageformats)|image(?:addborder|blur|clearrect\n    |copy|createcaptcha|crop|drawarc|drawbeveledrect|drawcubiccurve|drawimage|drawline\n    |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|drawtext\n    |filter|filtercolormap|filtercurves|filterkernel|filterwarpgrid|flip|fonts|formats\n    |getblob|getbufferedimage|getexifmetadata|getexiftag|getheight|getiptcmetadata|getiptctag\n    |getmetadata|getwidth|grayscale|info|makecolortransparent|maketranslucent|negative\n    |new|overlay|paste|read|readbase64|resize|rotate|rotatedrawingaxis|scaletofit|setantialiasing\n    |setbackgroundcolor|setdrawingalpha|setdrawingcolor|setdrawingstroke|setdrawingtransparency\n    |sharpen|shear|sheardrawingaxis|translate|translatedrawingaxis|write|writebase64\n    |xordrawingmode)|is(?:array|binary|boolean|closure|customfunction|date|ddx|debugmode\n    |defined|empty|fileobject|image|imagefile|instanceof|ipinrange|ipv6|json|leapyear\n    |localhost|notmap|null|numeric|numericdate|object|pdffile|pdfobject|query|safehtml\n    |simplevalue|soaprequest|spreadsheetfile|spreadsheetobject|struct|userinanyrole|userinrole\n    |userloggedin|valid|validoauthaccesstoken|videofile|wddx|xml|xmlattribute|xmldoc\n    |xmlelem|xmlnode|xmlroot|zipfile)|list(?:append|avg|changedelims|compact|contains\n    |containsnocase|deleteat|each|every|filter|find|findnocase|first|getat|indexexists\n    |insertat|itemtrim|last|len|map|prepend|qualify|reduce|removeduplicates|rest|setat\n    |some|sort|toarray|trim|valuecount|valuecountnocase)|object(?:equals|load|save)|orm(?:clearsession\n    |closeallsessions|closesession|evictcollection|evictentity|evictqueries|executequery\n    |flush|flushall|getsession|getsessionfactory|index|indexpurge|reload|search|searchoffline)\n    |query(?:addcolumn|addrow|columnarray|columncount|columndata|columnexists|columnlist\n    |convertforgrid|currentrow|deletecolumn|deleterow|each|every|execute|filter|getcell\n    |getrow|map|new|recordcount|reduce|rowdata|setcell|slice|some|sort)|replace(?:list\n    |nocase)|spreadsheet(?:addautofilter|addcolumn|addfreezepane|addimage|addinfo|addpagebreaks\n    |addrow|addrows|addsplitpane|createsheet|deletecolumn|deletecolumns|deleterow|deleterows\n    |formatcell|formatcellrange|formatcolumn|formatcolumns|formatrow|formatrows|getcellcomment\n    |getcellformula|getcellvalue|info|mergecells|new|read|readbinary|removesheet|setactivesheet\n    |setactivesheetnumber|setcellcomment|setcellformula|setcellvalue|setcolumnwidth|setfooter\n    |setheader|setrowheight|shiftcolumns|shiftrows|write)|store(?:addacl|getacl|getmetadata\n    |setacl|setmetadata)|struct(?:append|clear|copy|count|delete|each|every|filter|find\n    |findkey|findvalue|get|insert|isempty|keyarray|keyexists|keylist|keytranslate|map\n    |new|reduce|some|sort|update)|to(?:base64|binary|numeric|script|string)|transaction(?:commit\n    |rollback|setsavepoint)|url(?:decode|encode|encodedformat|sessionformat)|xml(?:childpos\n    |elemnew|format|getnodetype|new|parse|search|transform|validate)|abs|acos|addsoaprequestheader\n    |addsoapresponseheader|ajaxlink|ajaxonload|applicationstarttime|applicationstop|array\n    |asc|asin|atn|beat|binarydecode|binaryencode|bitand|bitmaskclear|bitmaskread|bitmaskset\n    |bitnot|bitor|bitshln|bitshrn|bitxor|booleanformat|callstackdump|callstackget|canonicalize\n    |ceiling|cfusion_decrypt|cfusion_encrypt|charsetdecode|charsetencode|chr|cjustify\n    |collectioneach|collectionevery|collectionfilter|collectionmap|collectionreduce|collectionsome\n    |compare|comparenocase|compress|contractpath|cos|csrfgeneratetoken|csrfverifytoken\n    |ctcacheclear|ctcachelist|datasourceflushmetacache|day|dayofweek|dayofweekasstring\n    |dayofweekshortasstring|dayofyear|daysinmonth|daysinyear|de|decimalformat|decodeforhtml\n    |decodefromurl|decrementvalue|decrypt|decryptbinary|deleteclientvariable|deserialize\n    |deserializejson|deserializexml|directorycopy|directorycreate|directorydelete|directoryexists\n    |directorylist|directoryrename|directorysize|dollarformat|dotnettocftype|duplicate\n    |each|echo|empty|encodeforcss|encodefordn|encodeforhtml|encodeforhtmlattribute|encodeforjavascript\n    |encodeforldap|encodeforurl|encodeforxml|encodeforxmlattribute|encodeforxpath|encrypt\n    |encryptbinary|esapidecode|esapiencode|evaluate|exp|expandpath|extract|fileappend\n    |fileclose|filecopy|filedelete|fileexists|filegetmimetype|fileiseof|filemove|fileopen\n    |fileread|filereadbinary|filereadline|fileseek|filesetaccessmode|filesetattribute\n    |filesetlastmodified|fileskipbytes|fileupload|fileuploadall|filewrite|filewriteline\n    |find|findnocase|findoneof|firstdayofmonth|fix|floor|formatbasen|generatepbkdfkey\n    |generatesecretkey|hash|hash40|hmac|hour|htmlcodeformat|htmleditformat|htmlparse\n    |iif|incrementvalue|inputbasen|insert|int|invalidateoauthaccesstoken|invoke|javacast\n    |jsstringformat|lcase|left|len|ljustify|location|log|log10|lscurrencyformat|lsdateformat\n    |lsdatetimeformat|lsdayofweek|lseurocurrencyformat|lsiscurrency|lsisdate|lsisnumeric\n    |lsnumberformat|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber\n    |lstimeformat|lsweek|ltrim|max|metaphone|mid|millisecond|min|minute|month|monthasstring\n    |monthshortasstring|newline|now|nowserver|nullvalue|numberformat|onapplicationend\n    |onapplicationstart|onerror|onmissingmethod|onmissingtemplate|onrequest|onrequestend\n    |onrequeststart|onsessionend|onsessionstart|pagepoolclear|pagepoollist|paragraphformat\n    |parameterexists|parsedatetime|parsenumber|pi|precisionevaluate|preservesinglequotes\n    |quarter|query|quotedvaluelist|rand|randomize|randrange|reescape|refind|refindnocase\n    |releasecomobject|rematch|rematchnocase|removecachedquery|removechars|repeatstring\n    |replace|rereplace|rereplacenocase|restdeleteapplication|restinitapplication|restsetresponse\n    |reverse|right|rjustify|round|rtrim|second|sendgatewaymessage|serialize|serializejson\n    |serializexml|sessiongetmetadata|sessioninvalidate|sessionrotate|sessionstarttime\n    |setencoding|setlocale|setprofilestring|settimezone|setvariable|sgn|sin|sizeof|sleep\n    |soundex|spanexcluding|spanincluding|sqr|sslcertificateinstall|sslcertificatelist\n    |stringlen|stripcr|systemcacheclear|systemoutput|tan|threadjoin|threadterminate|throw\n    |timeformat|trace|trim|truefalseformat|ucase|ucfirst|unserializejava|val|valuearray\n    |valuelist|verifyclient|week|wrap|writebody|writedump|writelog|writeoutput|wsgetallchannels\n    |wsgetsubscribers|wspublish|wssendmessage|year|yesnoformat)\n  )(\\()", 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.cfml"
                        }, 
                        "2": {
                            "name": "meta.function-call.parameters.support.cfml punctuation.definition.group.begin.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "name": "punctuation.separator.function-call.support.cfml", 
                            "match": ","
                        }, 
                        {
                            "include": "#source-cfml-script-support-call-parameter"
                        }, 
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "\\)"
                }
            ]
        }, 
        "source-cfml-script-keywords-top-level": {
            "patterns": [
                {
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.import.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-string"
                        }, 
                        {
                            "name": "variable.other.readwrite.cfml", 
                            "match": "[_$a-zA-Z][$\\w]*"
                        }, 
                        {
                            "name": "constant.other.cfml", 
                            "match": "\\*"
                        }
                    ], 
                    "end": "(?=\\n|;)", 
                    "name": "meta.import.cfml", 
                    "begin": "\\bimport\\b"
                }
            ]
        }, 
        "text-html-cfml-cfoutput-tag-id-attribute": {
            "captures": {
                "1": {
                    "name": "entity.other.attribute-name.id.html"
                }, 
                "2": {
                    "name": "punctuation.separator.key-value.html"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "contentName": "meta.toc-list.id.html", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.html"
                        }
                    }, 
                    "name": "string.quoted.double.html", 
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-entities"
                        }
                    ], 
                    "end": "\""
                }, 
                {
                    "contentName": "meta.toc-list.id.html", 
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.html"
                        }
                    }, 
                    "name": "string.quoted.single.html", 
                    "begin": "'", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.html"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput-entities"
                        }
                    ], 
                    "end": "'"
                }
            ], 
            "end": "(?<='|\")", 
            "name": "meta.attribute-with-value.id.html", 
            "begin": "\\b(id)\\b\\s*(=)"
        }, 
        "text-html-cfml-cfoutput-tag-generic-attribute": {
            "name": "entity.other.attribute-name.html", 
            "match": "\\b([a-zA-Z\\-:]+)"
        }, 
        "source-css-cfoutput-media-query-list": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "include": "#source-css-cfoutput-media-query"
                }
            ], 
            "end": "\\s*(?=[{;])", 
            "begin": "\\s*(?=[^{;])"
        }, 
        "source-cfml-script-function-call-params": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.group.end.cfml"
                }
            }, 
            "name": "meta.function-call.cfml meta.function-call.parameters.cfml", 
            "begin": "\\(", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.group.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "name": "punctuation.separator.function-call.cfml", 
                    "match": ","
                }, 
                {
                    "beginCaptures": {
                        "1": {
                            "name": "entity.other.function-parameter.cfml"
                        }, 
                        "2": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ], 
                    "end": "(?=[,\\)])", 
                    "begin": "\\b([_$a-zA-Z][$\\w]*)\\s*(=)(?!=)"
                }, 
                {
                    "include": "#source-cfml-script-expressions"
                }
            ], 
            "end": "\\)"
        }, 
        "cffunction": {
            "endCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                }, 
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                }, 
                "2": {
                    "name": "entity.name.tag.cfml storage.type.function.cfml"
                }, 
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            }, 
            "patterns": [
                {
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.cfml storage.type.function.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "captures": {
                                "4": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                }, 
                                "5": {
                                    "name": "entity.name.function.cfml"
                                }, 
                                "6": {
                                    "name": "punctuation.definition.string.end.cfml"
                                }, 
                                "1": {
                                    "name": "entity.other.attribute-name.cfml"
                                }, 
                                "2": {
                                    "name": "punctuation.separator.key-value.cfml"
                                }, 
                                "3": {
                                    "name": "string.quoted.double.cfml"
                                }
                            }, 
                            "match": "(?i)\\b(name)\\s*(=)\\s*((\")([_$a-zA-Z][$\\w]*)(\"))"
                        }, 
                        {
                            "captures": {
                                "4": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                }, 
                                "5": {
                                    "name": "storage.modifier.cfml"
                                }, 
                                "6": {
                                    "name": "punctuation.definition.string.end.cfml"
                                }, 
                                "1": {
                                    "name": "entity.other.attribute-name.cfml"
                                }, 
                                "2": {
                                    "name": "punctuation.separator.key-value.cfml"
                                }, 
                                "3": {
                                    "name": "string.quoted.double.cfml"
                                }
                            }, 
                            "match": "(?i)\\b(access)\\s*(=)\\s*((\")([_$a-zA-Z][$\\w]*)(\"))"
                        }, 
                        {
                            "captures": {
                                "8": {
                                    "name": "storage.type.return-type.object.cfml"
                                }, 
                                "9": {
                                    "name": "punctuation.definition.string.end.cfml"
                                }, 
                                "4": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                }, 
                                "6": {
                                    "name": "storage.type.return-type.void.cfml"
                                }, 
                                "7": {
                                    "name": "storage.type.return-type.primitive.cfml"
                                }, 
                                "1": {
                                    "name": "entity.other.attribute-name.cfml"
                                }, 
                                "2": {
                                    "name": "punctuation.separator.key-value.cfml"
                                }, 
                                "3": {
                                    "name": "string.quoted.double.cfml"
                                }
                            }, 
                            "match": "(?x)(?i)\n  \\b(returntype)\\s*(=)\\s*((\")(\n  (void)\n  |\n  (any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid) # return-type.primitive\n  |\n  ([A-Za-z0-9_\\.$]+) #return-type component/object (may need additional tokens)\n)(\"))"
                        }, 
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": "(?=>)", 
                    "name": "meta.tag.cfml meta.function.cfml", 
                    "begin": "(?i)(<)(cffunction)"
                }, 
                {
                    "contentName": "meta.function.body.tag.cfml text.html.cf", 
                    "beginCaptures": {
                        "0": {
                            "name": "meta.tag.cfml meta.function.cfml punctuation.definition.tag.end.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml"
                        }
                    ], 
                    "end": "(?i)(?=</cffunction>)", 
                    "begin": ">"
                }
            ], 
            "end": "(?i)(</)(cffunction)(>)", 
            "begin": "(?i)(?=<cffunction)"
        }, 
        "source-cfml-script-string-quoted-single": {
            "endCaptures": {
                "1": {
                    "name": "string.quoted.single.cfml punctuation.definition.string.end.cfml"
                }
            }, 
            "beginCaptures": {
                "0": {
                    "name": "string.quoted.single.cfml punctuation.definition.string.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "name": "string.quoted.single.cfml constant.character.escape.quote.cfml", 
                    "match": "''"
                }, 
                {
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml", 
                            "match": "''"
                        }, 
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }, 
                        {
                            "include": "#source-sql"
                        }
                    ], 
                    "end": "(?='[^'])", 
                    "name": "meta.string.quoted.single.cfml source.sql", 
                    "begin": "(?=\\s*(?:SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|WITH|DECLARE|FROM|WHERE|AND|ORDER BY|GROUP BY|INNER JOIN|OUTER JOIN|LEFT JOIN)\\b)"
                }, 
                {
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml", 
                            "match": "''"
                        }, 
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }
                    ], 
                    "end": "(?='[^'])", 
                    "name": "string.quoted.single.cfml", 
                    "begin": "(?=\\S)"
                }, 
                {
                    "name": "string.quoted.single.cfml", 
                    "match": "[\\s\\n]"
                }
            ], 
            "end": "(')(?!')", 
            "begin": "'"
        }, 
        "source-css-selector": {
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "name": "entity.name.tag.css", 
                    "match": "\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|datalist|dd|del|details|dfn|dialog|div|dl|dt|em|eventsource|fieldset|figure|figcaption|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|label|legend|li|link|map|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|samp|script|section|select|small|span|strike|strong|style|sub|summary|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.class.css", 
                    "match": "(\\.)[a-zA-Z0-9_-]+"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.id.css", 
                    "match": "(#)[a-zA-Z][a-zA-Z0-9_-]*"
                }, 
                {
                    "name": "entity.name.tag.wildcard.css", 
                    "match": "\\*"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.pseudo-element.css", 
                    "match": "(:+)(after|before|first-letter|first-line|selection)\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.pseudo-class.css", 
                    "match": "(:)((first|last)-child|(first|last|only)-of-type|empty|root|target|first|left|right)\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.pseudo-class.ui-state.css", 
                    "match": "(:)(checked|enabled|default|disabled|indeterminate|invalid|optional|required|valid)\\b"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "entity.other.attribute-name.pseudo-class.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.entity.css"
                        }, 
                        "3": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#source-css-selector"
                        }
                    ], 
                    "end": "\\)", 
                    "begin": "((:)not)(\\()"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "constant.numeric.css"
                        }, 
                        "5": {
                            "name": "punctuation.section.function.css"
                        }, 
                        "1": {
                            "name": "entity.other.attribute-name.pseudo-class.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.entity.css"
                        }, 
                        "3": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "match": "((:)nth-(?:(?:last-)?child|(?:last-)?of-type))(\\()(\\-?(?:\\d+n?|n)(?:\\+\\d+)?|even|odd)(\\))"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.pseudo-class.css", 
                    "match": "(:)(active|hover|link|visited|focus)\\b"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "string.unquoted.attribute-value.css"
                        }, 
                        "5": {
                            "name": "string.quoted.double.attribute-value.css"
                        }, 
                        "6": {
                            "name": "punctuation.definition.string.begin.css"
                        }, 
                        "7": {
                            "name": "punctuation.definition.string.end.css"
                        }, 
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }, 
                        "2": {
                            "name": "entity.other.attribute-name.attribute.css"
                        }, 
                        "3": {
                            "name": "punctuation.separator.operator.css"
                        }
                    }, 
                    "name": "meta.attribute-selector.css", 
                    "match": "(?i)(\\[)\\s*(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)(?:\\s*([~|^$*]?=)\\s*(?:(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)|((?>(['\"])(?:[^\\\\]|\\\\.)*?(\\6)))))?\\s*(\\])"
                }
            ], 
            "end": "(?=[/@{)])", 
            "name": "meta.selector.css", 
            "begin": "\\s*(?=[:.*#a-zA-Z])"
        }, 
        "source-cfml-script-tag-string-quoted-double": {
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.cfml"
                }
            }, 
            "name": "string.quoted.double.cfml", 
            "begin": "\"", 
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.cfml"
                }
            }, 
            "patterns": [
                {
                    "name": "constant.character.escape.quote.cfml", 
                    "match": "\"\""
                }, 
                {
                    "include": "#source-cfml-script-hash-delimiters"
                }
            ], 
            "end": "\"(?!\")"
        }, 
        "source-js": {
            "patterns": [
                {
                    "comment": "node.js shebang", 
                    "name": "comment.line.js", 
                    "match": "^#!/usr/bin/env node"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "support.class.js"
                        }, 
                        "2": {
                            "name": "support.constant.js"
                        }, 
                        "3": {
                            "name": "keyword.operator.js"
                        }
                    }, 
                    "comment": "match stuff like: Sound.prototype = { \u2026 } when extending an object", 
                    "name": "meta.class.js", 
                    "match": "([a-zA-Z_?.$][\\w?.$]*)\\.(prototype)\\s*(=)\\s*"
                }, 
                {
                    "captures": {
                        "8": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "4": {
                            "name": "keyword.operator.js"
                        }, 
                        "5": {
                            "name": "storage.type.function.js"
                        }, 
                        "6": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }, 
                        "7": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "1": {
                            "name": "support.class.js"
                        }, 
                        "2": {
                            "name": "support.constant.js"
                        }, 
                        "3": {
                            "name": "entity.name.function.js"
                        }
                    }, 
                    "comment": "match stuff like: Sound.prototype.play = function() { \u2026 }", 
                    "name": "meta.function.prototype.js", 
                    "match": "([a-zA-Z_?.$][\\w?.$]*)\\.(prototype)\\.([a-zA-Z_?.$][\\w?.$]*)\\s*(=)\\s*(function)?\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "keyword.operator.js"
                        }, 
                        "1": {
                            "name": "support.class.js"
                        }, 
                        "2": {
                            "name": "support.constant.js"
                        }, 
                        "3": {
                            "name": "entity.name.function.js"
                        }
                    }, 
                    "comment": "match stuff like: Sound.prototype.play = myfunc", 
                    "name": "meta.function.js", 
                    "match": "([a-zA-Z_?.$][\\w?.$]*)\\.(prototype)\\.([a-zA-Z_?.$][\\w?.$]*)\\s*(=)\\s*"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "storage.type.function.js"
                        }, 
                        "5": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }, 
                        "6": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "7": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "support.class.js"
                        }, 
                        "2": {
                            "name": "entity.name.function.js"
                        }, 
                        "3": {
                            "name": "keyword.operator.js"
                        }
                    }, 
                    "comment": "match stuff like: Sound.play = function() { \u2026 }", 
                    "name": "meta.function.js", 
                    "match": "([a-zA-Z_?.$][\\w?.$]*)\\.([a-zA-Z_?.$][\\w?.$]*)\\s*(=)\\s*(function)\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }, 
                        "5": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "6": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "entity.name.function.js"
                        }, 
                        "2": {
                            "name": "keyword.operator.js"
                        }, 
                        "3": {
                            "name": "storage.type.function.js"
                        }
                    }, 
                    "comment": "match stuff like: play = function() { \u2026 }", 
                    "name": "meta.function.js", 
                    "match": "([a-zA-Z_?$][\\w?$]*)\\s*(=)\\s*(function)\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "5": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "storage.type.function.js"
                        }, 
                        "2": {
                            "name": "entity.name.function.js"
                        }, 
                        "3": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }
                    }, 
                    "comment": "match regular function like: function myFunc(arg) { \u2026 }", 
                    "name": "meta.function.js", 
                    "match": "\\b(function)\\s+([a-zA-Z_$]\\w*)?\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "variable.parameter.function.js"
                        }, 
                        "5": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "entity.name.function.js"
                        }, 
                        "2": {
                            "name": "storage.type.function.js"
                        }, 
                        "3": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }
                    }, 
                    "comment": "match stuff like: foobar: function() { \u2026 }", 
                    "name": "meta.function.json.js", 
                    "match": "\\b([a-zA-Z_?.$][\\w?.$]*)\\s*:\\s*\\b(function)?\\s*(\\()(.*?)(\\))"
                }, 
                {
                    "captures": {
                        "8": {
                            "name": "punctuation.definition.string.end.js"
                        }, 
                        "9": {
                            "name": "entity.name.function.js"
                        }, 
                        "4": {
                            "name": "punctuation.definition.string.end.js"
                        }, 
                        "5": {
                            "name": "string.quoted.double.js"
                        }, 
                        "6": {
                            "name": "punctuation.definition.string.begin.js"
                        }, 
                        "7": {
                            "name": "entity.name.function.js"
                        }, 
                        "12": {
                            "name": "punctuation.definition.parameters.end.js"
                        }, 
                        "1": {
                            "name": "string.quoted.single.js"
                        }, 
                        "10": {
                            "name": "punctuation.definition.parameters.begin.js"
                        }, 
                        "3": {
                            "name": "entity.name.function.js"
                        }, 
                        "2": {
                            "name": "punctuation.definition.string.begin.js"
                        }, 
                        "11": {
                            "name": "variable.parameter.function.js"
                        }
                    }, 
                    "comment": "Attempt to match \"foo\": function", 
                    "name": "meta.function.json.js", 
                    "match": "(?:((')([^']*)('))|((\")([^\"]*)(\")))\\s*:\\s*\\b(function)?\\s*(\\()([^)]*)(\\))"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "keyword.operator.new.js"
                        }, 
                        "2": {
                            "name": "entity.name.type.instance.js"
                        }
                    }, 
                    "name": "meta.class.instance.constructor", 
                    "match": "(new)\\s+(\\w+(?:\\.\\w*)?)"
                }, 
                {
                    "name": "entity.name.type.object.js.firebug", 
                    "match": "\\b(console)\\b"
                }, 
                {
                    "name": "support.function.js.firebug", 
                    "match": "\\.(warn|info|log|error|time|timeEnd|assert)\\b"
                }, 
                {
                    "name": "constant.numeric.js", 
                    "match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.js"
                        }
                    }, 
                    "name": "string.quoted.single.js", 
                    "begin": "'", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.js"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "name": "constant.character.escape.js", 
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
                        }
                    ], 
                    "end": "'"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.js"
                        }
                    }, 
                    "name": "string.quoted.double.js", 
                    "begin": "\"", 
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.js"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "name": "constant.character.escape.js", 
                            "match": "\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)"
                        }
                    ], 
                    "end": "\""
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.js"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.documentation.js", 
                    "begin": "/\\*\\*(?!/)"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.js"
                        }
                    }, 
                    "end": "\\*/", 
                    "name": "comment.block.js", 
                    "begin": "/\\*"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.js"
                        }
                    }, 
                    "name": "comment.line.double-slash.js", 
                    "match": "(//).*$\\n?"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.html.js"
                        }, 
                        "2": {
                            "name": "punctuation.definition.comment.html.js"
                        }
                    }, 
                    "name": "comment.block.html.js", 
                    "match": "(<!--|-->)"
                }, 
                {
                    "name": "storage.type.js", 
                    "match": "\\b(boolean|byte|char|class|double|enum|float|function|int|interface|long|short|var|void)\\b"
                }, 
                {
                    "name": "storage.modifier.js", 
                    "match": "\\b(const|export|extends|final|implements|native|private|protected|public|static|synchronized|throws|transient|volatile)\\b"
                }, 
                {
                    "name": "keyword.control.js", 
                    "match": "\\b(break|case|catch|continue|default|do|else|finally|for|goto|if|import|package|return|switch|throw|try|while)\\b"
                }, 
                {
                    "name": "keyword.operator.js", 
                    "match": "\\b(delete|in|instanceof|new|typeof|with)\\b"
                }, 
                {
                    "name": "constant.language.boolean.true.js", 
                    "match": "\\btrue\\b"
                }, 
                {
                    "name": "constant.language.boolean.false.js", 
                    "match": "\\bfalse\\b"
                }, 
                {
                    "name": "constant.language.null.js", 
                    "match": "\\bnull\\b"
                }, 
                {
                    "name": "variable.language.js", 
                    "match": "\\b(super|this)\\b"
                }, 
                {
                    "name": "keyword.other.js", 
                    "match": "\\b(debugger)\\b"
                }, 
                {
                    "name": "support.class.js", 
                    "match": "\\b(Anchor|Applet|Area|Array|Boolean|Button|Checkbox|Date|document|event|FileUpload|Form|Frame|Function|Hidden|History|Image|JavaArray|JavaClass|JavaObject|JavaPackage|java|Layer|Link|Location|Math|MimeType|Number|navigator|netscape|Object|Option|Packages|Password|Plugin|Radio|RegExp|Reset|Select|String|Style|Submit|screen|sun|Text|Textarea|window|XMLHttpRequest)\\b"
                }, 
                {
                    "name": "support.function.js", 
                    "match": "\\b(s(h(ift|ow(Mod(elessDialog|alDialog)|Help))|croll(X|By(Pages|Lines)?|Y|To)?|t(op|rike)|i(n|zeToContent|debar|gnText)|ort|u(p|b(str(ing)?)?)|pli(ce|t)|e(nd|t(Re(sizable|questHeader)|M(i(nutes|lliseconds)|onth)|Seconds|Ho(tKeys|urs)|Year|Cursor|Time(out)?|Interval|ZOptions|Date|UTC(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Date|FullYear)|FullYear|Active)|arch)|qrt|lice|avePreferences|mall)|h(ome|andleEvent)|navigate|c(har(CodeAt|At)|o(s|n(cat|textual|firm)|mpile)|eil|lear(Timeout|Interval)?|a(ptureEvents|ll)|reate(StyleSheet|Popup|EventObject))|t(o(GMTString|S(tring|ource)|U(TCString|pperCase)|Lo(caleString|werCase))|est|a(n|int(Enabled)?))|i(s(NaN|Finite)|ndexOf|talics)|d(isableExternalCapture|ump|etachEvent)|u(n(shift|taint|escape|watch)|pdateCommands)|j(oin|avaEnabled)|p(o(p|w)|ush|lugins.refresh|a(ddings|rse(Int|Float)?)|r(int|ompt|eference))|e(scape|nableExternalCapture|val|lementFromPoint|x(p|ec(Script|Command)?))|valueOf|UTC|queryCommand(State|Indeterm|Enabled|Value)|f(i(nd|le(ModifiedDate|Size|CreatedDate|UpdatedDate)|xed)|o(nt(size|color)|rward)|loor|romCharCode)|watch|l(ink|o(ad|g)|astIndexOf)|a(sin|nchor|cos|t(tachEvent|ob|an(2)?)|pply|lert|b(s|ort))|r(ou(nd|teEvents)|e(size(By|To)|calc|turnValue|place|verse|l(oad|ease(Capture|Events)))|andom)|g(o|et(ResponseHeader|M(i(nutes|lliseconds)|onth)|Se(conds|lection)|Hours|Year|Time(zoneOffset)?|Da(y|te)|UTC(M(i(nutes|lliseconds)|onth)|Seconds|Hours|Da(y|te)|FullYear)|FullYear|A(ttention|llResponseHeaders)))|m(in|ove(B(y|elow)|To(Absolute)?|Above)|ergeAttributes|a(tch|rgins|x))|b(toa|ig|o(ld|rderWidths)|link|ack))\\b(?=\\()"
                }, 
                {
                    "name": "support.function.dom.js", 
                    "match": "\\b(s(ub(stringData|mit)|plitText|e(t(NamedItem|Attribute(Node)?)|lect))|has(ChildNodes|Feature)|namedItem|c(l(ick|o(se|neNode))|reate(C(omment|DATASection|aption)|T(Head|extNode|Foot)|DocumentFragment|ProcessingInstruction|E(ntityReference|lement)|Attribute))|tabIndex|i(nsert(Row|Before|Cell|Data)|tem)|open|delete(Row|C(ell|aption)|T(Head|Foot)|Data)|focus|write(ln)?|a(dd|ppend(Child|Data))|re(set|place(Child|Data)|move(NamedItem|Child|Attribute(Node)?)?)|get(NamedItem|Element(sBy(Name|TagName)|ById)|Attribute(Node)?)|blur)\\b(?=\\()"
                }, 
                {
                    "name": "support.constant.js", 
                    "match": "(?<=\\.)(s(ystemLanguage|cr(ipts|ollbars|een(X|Y|Top|Left))|t(yle(Sheets)?|atus(Text|bar)?)|ibling(Below|Above)|ource|uffixes|e(curity(Policy)?|l(ection|f)))|h(istory|ost(name)?|as(h|Focus))|y|X(MLDocument|SLDocument)|n(ext|ame(space(s|URI)|Prop))|M(IN_VALUE|AX_VALUE)|c(haracterSet|o(n(structor|trollers)|okieEnabled|lorDepth|mp(onents|lete))|urrent|puClass|l(i(p(boardData)?|entInformation)|osed|asses)|alle(e|r)|rypto)|t(o(olbar|p)|ext(Transform|Indent|Decoration|Align)|ags)|SQRT(1_2|2)|i(n(ner(Height|Width)|put)|ds|gnoreCase)|zIndex|o(scpu|n(readystatechange|Line)|uter(Height|Width)|p(sProfile|ener)|ffscreenBuffering)|NEGATIVE_INFINITY|d(i(splay|alog(Height|Top|Width|Left|Arguments)|rectories)|e(scription|fault(Status|Ch(ecked|arset)|View)))|u(ser(Profile|Language|Agent)|n(iqueID|defined)|pdateInterval)|_content|p(ixelDepth|ort|ersonalbar|kcs11|l(ugins|atform)|a(thname|dding(Right|Bottom|Top|Left)|rent(Window|Layer)?|ge(X(Offset)?|Y(Offset)?))|r(o(to(col|type)|duct(Sub)?|mpter)|e(vious|fix)))|e(n(coding|abledPlugin)|x(ternal|pando)|mbeds)|v(isibility|endor(Sub)?|Linkcolor)|URLUnencoded|P(I|OSITIVE_INFINITY)|f(ilename|o(nt(Size|Family|Weight)|rmName)|rame(s|Element)|gColor)|E|whiteSpace|l(i(stStyleType|n(eHeight|kColor))|o(ca(tion(bar)?|lName)|wsrc)|e(ngth|ft(Context)?)|a(st(M(odified|atch)|Index|Paren)|yer(s|X)|nguage))|a(pp(MinorVersion|Name|Co(deName|re)|Version)|vail(Height|Top|Width|Left)|ll|r(ity|guments)|Linkcolor|bove)|r(ight(Context)?|e(sponse(XML|Text)|adyState))|global|x|m(imeTypes|ultiline|enubar|argin(Right|Bottom|Top|Left))|L(N(10|2)|OG(10E|2E))|b(o(ttom|rder(Width|RightWidth|BottomWidth|Style|Color|TopWidth|LeftWidth))|ufferDepth|elow|ackground(Color|Image)))\\b"
                }, 
                {
                    "name": "support.constant.dom.js", 
                    "match": "(?<=\\.)(s(hape|ystemId|c(heme|ope|rolling)|ta(ndby|rt)|ize|ummary|pecified|e(ctionRowIndex|lected(Index)?)|rc)|h(space|t(tpEquiv|mlFor)|e(ight|aders)|ref(lang)?)|n(o(Resize|tation(s|Name)|Shade|Href|de(Name|Type|Value)|Wrap)|extSibling|ame)|c(h(ildNodes|Off|ecked|arset)?|ite|o(ntent|o(kie|rds)|de(Base|Type)?|l(s|Span|or)|mpact)|ell(s|Spacing|Padding)|l(ear|assName)|aption)|t(ype|Bodies|itle|Head|ext|a(rget|gName)|Foot)|i(sMap|ndex|d|m(plementation|ages))|o(ptions|wnerDocument|bject)|d(i(sabled|r)|o(c(type|umentElement)|main)|e(clare|f(er|ault(Selected|Checked|Value)))|at(eTime|a))|useMap|p(ublicId|arentNode|r(o(file|mpt)|eviousSibling))|e(n(ctype|tities)|vent|lements)|v(space|ersion|alue(Type)?|Link|Align)|URL|f(irstChild|orm(s)?|ace|rame(Border)?)|width|l(ink(s)?|o(ngDesc|wSrc)|a(stChild|ng|bel))|a(nchors|c(ce(ssKey|pt(Charset)?)|tion)|ttributes|pplets|l(t|ign)|r(chive|eas)|xis|Link|bbr)|r(ow(s|Span|Index)|ules|e(v|ferrer|l|adOnly))|m(ultiple|e(thod|dia)|a(rgin(Height|Width)|xLength))|b(o(dy|rder)|ackground|gColor))\\b"
                }, 
                {
                    "name": "support.constant.dom.js", 
                    "match": "\\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\\b"
                }, 
                {
                    "name": "support.function.event-handler.js", 
                    "match": "\\bon(R(ow(s(inserted|delete)|e(nter|xit))|e(s(ize(start|end)?|et)|adystatechange))|Mouse(o(ut|ver)|down|up|move)|B(efore(cut|deactivate|u(nload|pdate)|p(aste|rint)|editfocus|activate)|lur)|S(croll|top|ubmit|elect(start|ionchange)?)|H(over|elp)|C(hange|ont(extmenu|rolselect)|ut|ellchange|l(ick|ose))|D(eactivate|ata(setc(hanged|omplete)|available)|r(op|ag(start|over|drop|en(ter|d)|leave)?)|blclick)|Unload|P(aste|ropertychange)|Error(update)?|Key(down|up|press)|Focus|Load|A(ctivate|fter(update|print)|bort))\\b"
                }, 
                {
                    "name": "keyword.operator.js", 
                    "match": "!|\\$|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|\\^=|\\b(in|instanceof|new|delete|typeof|void)\\b"
                }, 
                {
                    "name": "constant.language.js", 
                    "match": "\\b(Infinity|NaN|undefined)\\b"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.js"
                        }
                    }, 
                    "name": "string.regexp.js", 
                    "begin": "(?<=[=(:]|^|return|&&|\\|\\||!)\\s*(/)(?![/*+{}?])", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.begin.js"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "name": "constant.character.escape.js", 
                            "match": "\\\\."
                        }
                    ], 
                    "end": "(/)[igm]*"
                }, 
                {
                    "name": "punctuation.terminator.statement.js", 
                    "match": "\\;"
                }, 
                {
                    "name": "meta.delimiter.object.comma.js", 
                    "match": ",[ |\\t]*"
                }, 
                {
                    "name": "meta.delimiter.method.period.js", 
                    "match": "\\."
                }, 
                {
                    "name": "meta.brace.curly.js", 
                    "match": "\\{|\\}"
                }, 
                {
                    "name": "meta.brace.round.js", 
                    "match": "\\(|\\)"
                }, 
                {
                    "name": "meta.brace.square.js", 
                    "match": "\\[|\\]"
                }
            ]
        }, 
        "source-css-cfoutput-selector": {
            "patterns": [
                {
                    "include": "#cfoutput-injection"
                }, 
                {
                    "name": "entity.name.tag.css", 
                    "match": "\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|datalist|dd|del|details|dfn|dialog|div|dl|dt|em|eventsource|fieldset|figure|figcaption|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|label|legend|li|link|map|mark|menu|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|samp|script|section|select|small|span|strike|strong|style|sub|summary|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.class.css", 
                    "match": "(\\.)[a-zA-Z0-9_-]+"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.id.css", 
                    "match": "(#)[a-zA-Z][a-zA-Z0-9_-]*"
                }, 
                {
                    "name": "entity.name.tag.wildcard.css", 
                    "match": "\\*"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.pseudo-element.css", 
                    "match": "(:+)(after|before|first-letter|first-line|selection)\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.pseudo-class.css", 
                    "match": "(:)((first|last)-child|(first|last|only)-of-type|empty|root|target|first|left|right)\\b"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.pseudo-class.ui-state.css", 
                    "match": "(:)(checked|enabled|default|disabled|indeterminate|invalid|optional|required|valid)\\b"
                }, 
                {
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "entity.other.attribute-name.pseudo-class.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.entity.css"
                        }, 
                        "3": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfoutput-injection"
                        }, 
                        {
                            "include": "#source-css-cfoutput-selector"
                        }
                    ], 
                    "end": "\\)", 
                    "begin": "((:)not)(\\()"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "constant.numeric.css"
                        }, 
                        "5": {
                            "name": "punctuation.section.function.css"
                        }, 
                        "1": {
                            "name": "entity.other.attribute-name.pseudo-class.css"
                        }, 
                        "2": {
                            "name": "punctuation.definition.entity.css"
                        }, 
                        "3": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "match": "((:)nth-(?:(?:last-)?child|(?:last-)?of-type))(\\()(\\-?(?:\\d+n?|n)(?:\\+\\d+)?|even|odd)(\\))"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }
                    }, 
                    "name": "entity.other.attribute-name.pseudo-class.css", 
                    "match": "(:)(active|hover|link|visited|focus)\\b"
                }, 
                {
                    "captures": {
                        "4": {
                            "name": "string.unquoted.attribute-value.css"
                        }, 
                        "5": {
                            "name": "string.quoted.double.attribute-value.css"
                        }, 
                        "6": {
                            "name": "punctuation.definition.string.begin.css"
                        }, 
                        "7": {
                            "name": "punctuation.definition.string.end.css"
                        }, 
                        "1": {
                            "name": "punctuation.definition.entity.css"
                        }, 
                        "2": {
                            "name": "entity.other.attribute-name.attribute.css"
                        }, 
                        "3": {
                            "name": "punctuation.separator.operator.css"
                        }
                    }, 
                    "name": "meta.attribute-selector.css", 
                    "match": "(?i)(\\[)\\s*(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)(?:\\s*([~|^$*]?=)\\s*(?:(-?[_a-z\\\\[[:^ascii:]]][_a-z0-9\\-\\\\[[:^ascii:]]]*)|((?>(['\"])(?:[^\\\\]|\\\\.)*?(\\6)))))?\\s*(\\])"
                }
            ], 
            "end": "(?=[/@{)])", 
            "name": "meta.selector.css", 
            "begin": "\\s*(?=[:.*#a-zA-Z])"
        }, 
        "hash-delimiters": {
            "patterns": [
                {
                    "name": "constant.character.escape.hash.cfml", 
                    "match": "##"
                }, 
                {
                    "contentName": "source.cfml.script", 
                    "endCaptures": {
                        "0": {
                            "name": "constant.character.hash.cfml.end"
                        }
                    }, 
                    "begin": "#", 
                    "beginCaptures": {
                        "0": {
                            "name": "constant.character.hash.cfml.start"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#source-cfml-script"
                        }
                    ], 
                    "end": "#"
                }
            ]
        }, 
        "extends": {
            "endCaptures": {
                "8": {
                    "name": "punctuation.definition.string.end.cfml"
                }, 
                "9": {
                    "name": "string.unquoted.cfml entity.other.inherited-class.cfml"
                }, 
                "4": {
                    "name": "punctuation.definition.string.end.cfml"
                }, 
                "5": {
                    "name": "string.quoted.single.cfml"
                }, 
                "6": {
                    "name": "punctuation.definition.string.begin.cfml"
                }, 
                "7": {
                    "name": "entity.other.inherited-class.cfml"
                }, 
                "1": {
                    "name": "string.quoted.double.cfml"
                }, 
                "2": {
                    "name": "punctuation.definition.string.begin.cfml"
                }, 
                "3": {
                    "name": "entity.other.inherited-class.cfml"
                }
            }, 
            "beginCaptures": {
                "1": {
                    "name": "entity.other.attribute-name.cfml storage.modifier.extends.cfml"
                }, 
                "2": {
                    "name": "punctuation.separator.key-value.cfml"
                }
            }, 
            "end": "((\")([a-zA-Z0-9:.]+)?(\"))|((')([a-zA-Z0-9:.]+)?('))|([a-zA-Z0-9:.]+)|(?=[^a-zA-Z0-9:.])", 
            "name": "meta.class.inheritance.cfml", 
            "begin": "(?i)\\b(extends)\\s*(=)\\s*"
        }, 
        "source-css-media-query-list": {
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "include": "#source-css-media-query"
                }
            ], 
            "end": "\\s*(?=[{;])", 
            "begin": "\\s*(?=[^{;])"
        }, 
        "source-css-color-values": {
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "comment": "http://www.w3.org/TR/CSS21/syndata.html#value-def-color", 
                    "name": "support.constant.color.w3c-standard-color-name.css", 
                    "match": "\\b(aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)\\b"
                }, 
                {
                    "comment": "These colours are mostly recognised but will not validate. ref: http://www.w3schools.com/css/css_colornames.asp", 
                    "name": "invalid.deprecated.color.w3c-non-standard-color-name.css", 
                    "match": "\\b(aliceblue|antiquewhite|aquamarine|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|gainsboro|ghostwhite|gold|goldenrod|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|magenta|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olivedrab|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato|turquoise|violet|wheat|whitesmoke|yellowgreen)\\b"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "beginCaptures": {
                        "1": {
                            "name": "support.function.misc.css"
                        }, 
                        "2": {
                            "name": "punctuation.section.function.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "name": "constant.other.color.rgb-value.css", 
                            "match": "(?x)\\b\n                                (0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\\s*,\\s*){2}\n                                (0*((1?[0-9]{1,2})|(2([0-4][0-9]|5[0-5])))\\b)\n                                (\\s*,\\s*((0?\\.[0-9]+)|[0-1]))?\n                            "
                        }, 
                        {
                            "name": "constant.other.color.rgb-percentage.css", 
                            "match": "\\b([0-9]{1,2}|100)\\s*%,\\s*([0-9]{1,2}|100)\\s*%,\\s*([0-9]{1,2}|100)\\s*%"
                        }, 
                        {
                            "include": "#source-css-numeric-values"
                        }
                    ], 
                    "end": "(\\))", 
                    "begin": "(hsla?|rgba?)\\s*(\\()"
                }
            ]
        }, 
        "cfoutput": {
            "endCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                }, 
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                }, 
                "2": {
                    "name": "entity.name.tag.cfml"
                }, 
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            }, 
            "patterns": [
                {
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        }, 
                        "2": {
                            "name": "entity.name.tag.cfml"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ], 
                    "end": "(?=>)", 
                    "name": "meta.tag.cfml", 
                    "begin": "(?i)(<)(cfoutput)"
                }, 
                {
                    "contentName": "meta.scope.cfoutput.cfml text.html.cf", 
                    "beginCaptures": {
                        "0": {
                            "name": "meta.tag.cfml punctuation.definition.tag.end.cfml.test"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#text-html-cfml-cfoutput"
                        }
                    ], 
                    "end": "(?i)(?=</cfoutput>)", 
                    "begin": ">"
                }
            ], 
            "end": "(?i)(</)(cfoutput)(>)", 
            "begin": "(?i)(?=<cfoutput)"
        }, 
        "source-css-rule-list": {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.property-list.css"
                }
            }, 
            "patterns": [
                {
                    "include": "#cfml-tags"
                }, 
                {
                    "include": "#source-css-comment-block"
                }, 
                {
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "name": "support.type.property-name.css", 
                            "match": "\\b(azimuth|background-attachment|background-color|background-image|background-position|background-repeat|background|box-shadow|border-radius|border-bottom-color|border-bottom-style|border-bottom-width|border-bottom|border-collapse|border-color|border-left-color|border-left-style|border-left-width|border-left|border-right-color|border-right-style|border-right-width|border-right|border-spacing|border-style|border-top-color|border-top-style|border-top-width|border-top|border-width|border|bottom|caption-side|clear|clip|color|content|counter-increment|counter-reset|cue-after|cue-before|cue|cursor|direction|display|elevation|empty-cells|float|font-family|font-size-adjust|font-size|font-stretch|font-style|font-variant|font-weight|font|height|image-rendering|left|letter-spacing|line-height|list-style-image|list-style-position|list-style-type|list-style|margin-bottom|margin-left|margin-right|margin-top|marker-offset|margin|marks|max-height|max-width|min-height|min-width|-moz-border-radius|opacity|orphans|outline-color|outline-style|outline-width|outline|overflow(-[xy])?|padding-bottom|padding-left|padding-right|padding-top|padding|page-break-after|page-break-before|page-break-inside|page|pause-after|pause-before|pause|pitch-range|pitch|play-during|pointer-events|position|quotes|resize|richness|right|size|speak-header|speak-numeral|speak-punctuation|speech-rate|speak|src|stress|table-layout|text-(align|decoration|indent|rendering|shadow|transform)|top|unicode-bidi|vertical-align|visibility|voice-family|volume|white-space|widows|width|word-(spacing|wrap)|zoom|z-index)\\b"
                        }
                    ], 
                    "end": "$|(?![-a-z])", 
                    "name": "meta.property-name.css", 
                    "begin": "(?<![-a-z])(?=[-a-z])"
                }, 
                {
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.terminator.rule.css"
                        }
                    }, 
                    "name": "meta.property-value.css", 
                    "begin": "(:)\\s*", 
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.key-value.css"
                        }
                    }, 
                    "patterns": [
                        {
                            "include": "#cfml-tags"
                        }, 
                        {
                            "include": "#source-css-property-values"
                        }
                    ], 
                    "end": "\\s*(;|(?=\\}))"
                }
            ], 
            "end": "(?=\\s*\\})", 
            "name": "meta.property-list.css", 
            "begin": "\\{"
        }, 
        "cfif": {
            "contentName": "source.cfml.script", 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            }, 
            "name": "meta.tag.cfml", 
            "begin": "(?i)(<)(cfif|cfelseif)", 
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                }, 
                "2": {
                    "name": "entity.name.tag.cfml"
                }
            }, 
            "patterns": [
                {
                    "include": "#source-cfml-script"
                }
            ], 
            "end": ">"
        }
    }, 
    "name": "CFML", 
    "scopeName": "text.html.cfm"
}